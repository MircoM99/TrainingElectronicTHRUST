
SolutionEx1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf8  08003cf8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d00  08003d00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000070  08003d78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003d78  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab38  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc6  00000000  00000000  0002abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  0002d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174ec  00000000  00000000  0002d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb3c  00000000  00000000  00044e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b19  00000000  00000000  00050960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2479  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002368  00000000  00000000  000e24cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c78 	.word	0x08003c78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003c78 	.word	0x08003c78

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000596:	4b3d      	ldr	r3, [pc, #244]	; (800068c <MX_ADC1_Init+0x108>)
 8000598:	4a3d      	ldr	r2, [pc, #244]	; (8000690 <MX_ADC1_Init+0x10c>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800059c:	4b3b      	ldr	r3, [pc, #236]	; (800068c <MX_ADC1_Init+0x108>)
 800059e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a4:	4b39      	ldr	r3, [pc, #228]	; (800068c <MX_ADC1_Init+0x108>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005aa:	4b38      	ldr	r3, [pc, #224]	; (800068c <MX_ADC1_Init+0x108>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b0:	4b36      	ldr	r3, [pc, #216]	; (800068c <MX_ADC1_Init+0x108>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b6:	4b35      	ldr	r3, [pc, #212]	; (800068c <MX_ADC1_Init+0x108>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005be:	4b33      	ldr	r3, [pc, #204]	; (800068c <MX_ADC1_Init+0x108>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c4:	4b31      	ldr	r3, [pc, #196]	; (800068c <MX_ADC1_Init+0x108>)
 80005c6:	4a33      	ldr	r2, [pc, #204]	; (8000694 <MX_ADC1_Init+0x110>)
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ca:	4b30      	ldr	r3, [pc, #192]	; (800068c <MX_ADC1_Init+0x108>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005d0:	4b2e      	ldr	r3, [pc, #184]	; (800068c <MX_ADC1_Init+0x108>)
 80005d2:	2205      	movs	r2, #5
 80005d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d6:	4b2d      	ldr	r3, [pc, #180]	; (800068c <MX_ADC1_Init+0x108>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <MX_ADC1_Init+0x108>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e4:	4829      	ldr	r0, [pc, #164]	; (800068c <MX_ADC1_Init+0x108>)
 80005e6:	f000 fc11 	bl	8000e0c <HAL_ADC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005f0:	f000 fa1c 	bl	8000a2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f8:	2301      	movs	r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4821      	ldr	r0, [pc, #132]	; (800068c <MX_ADC1_Init+0x108>)
 8000606:	f000 fd49 	bl	800109c <HAL_ADC_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000610:	f000 fa0c 	bl	8000a2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000614:	2301      	movs	r3, #1
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	481a      	ldr	r0, [pc, #104]	; (800068c <MX_ADC1_Init+0x108>)
 8000622:	f000 fd3b 	bl	800109c <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800062c:	f000 f9fe 	bl	8000a2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000630:	2304      	movs	r3, #4
 8000632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000634:	2303      	movs	r3, #3
 8000636:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4619      	mov	r1, r3
 800063c:	4813      	ldr	r0, [pc, #76]	; (800068c <MX_ADC1_Init+0x108>)
 800063e:	f000 fd2d 	bl	800109c <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000648:	f000 f9f0 	bl	8000a2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800064c:	2306      	movs	r3, #6
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_ADC1_Init+0x108>)
 800065a:	f000 fd1f 	bl	800109c <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000664:	f000 f9e2 	bl	8000a2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000668:	2307      	movs	r3, #7
 800066a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800066c:	2305      	movs	r3, #5
 800066e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_ADC1_Init+0x108>)
 8000676:	f000 fd11 	bl	800109c <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000680:	f000 f9d4 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000008c 	.word	0x2000008c
 8000690:	40012000 	.word	0x40012000
 8000694:	0f000001 	.word	0x0f000001

08000698 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <HAL_ADC_MspInit+0xd8>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d156      	bne.n	8000768 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <HAL_ADC_MspInit+0xdc>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a2c      	ldr	r2, [pc, #176]	; (8000774 <HAL_ADC_MspInit+0xdc>)
 80006c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <HAL_ADC_MspInit+0xdc>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <HAL_ADC_MspInit+0xdc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a25      	ldr	r2, [pc, #148]	; (8000774 <HAL_ADC_MspInit+0xdc>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <HAL_ADC_MspInit+0xdc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80006f2:	23d3      	movs	r3, #211	; 0xd3
 80006f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	481c      	ldr	r0, [pc, #112]	; (8000778 <HAL_ADC_MspInit+0xe0>)
 8000706:	f001 fbfb 	bl	8001f00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <HAL_ADC_MspInit+0xe4>)
 800070c:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <HAL_ADC_MspInit+0xe8>)
 800070e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <HAL_ADC_MspInit+0xe4>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <HAL_ADC_MspInit+0xe4>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <HAL_ADC_MspInit+0xe4>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_ADC_MspInit+0xe4>)
 8000724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000728:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_ADC_MspInit+0xe4>)
 800072c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000730:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_ADC_MspInit+0xe4>)
 8000734:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000738:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_ADC_MspInit+0xe4>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_ADC_MspInit+0xe4>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <HAL_ADC_MspInit+0xe4>)
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800074c:	480b      	ldr	r0, [pc, #44]	; (800077c <HAL_ADC_MspInit+0xe4>)
 800074e:	f001 f867 	bl	8001820 <HAL_DMA_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000758:	f000 f968 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_ADC_MspInit+0xe4>)
 8000760:	639a      	str	r2, [r3, #56]	; 0x38
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_ADC_MspInit+0xe4>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40012000 	.word	0x40012000
 8000774:	40023800 	.word	0x40023800
 8000778:	40020000 	.word	0x40020000
 800077c:	200000d4 	.word	0x200000d4
 8000780:	40026410 	.word	0x40026410

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <MX_DMA_Init+0x3c>)
 8000794:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2038      	movs	r0, #56	; 0x38
 80007ac:	f001 f801 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007b0:	2038      	movs	r0, #56	; 0x38
 80007b2:	f001 f81a 	bl	80017ea <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <MX_GPIO_Init+0xe0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <MX_GPIO_Init+0xe0>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <MX_GPIO_Init+0xe0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <MX_GPIO_Init+0xe0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a29      	ldr	r2, [pc, #164]	; (80008a4 <MX_GPIO_Init+0xe0>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_GPIO_Init+0xe0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_GPIO_Init+0xe0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <MX_GPIO_Init+0xe0>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_GPIO_Init+0xe0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_GPIO_Init+0xe0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <MX_GPIO_Init+0xe0>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_GPIO_Init+0xe0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	4816      	ldr	r0, [pc, #88]	; (80008a8 <MX_GPIO_Init+0xe4>)
 8000850:	f001 fcda 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4810      	ldr	r0, [pc, #64]	; (80008ac <MX_GPIO_Init+0xe8>)
 800086c:	f001 fb48 	bl	8001f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000870:	2320      	movs	r3, #32
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4808      	ldr	r0, [pc, #32]	; (80008a8 <MX_GPIO_Init+0xe4>)
 8000888:	f001 fb3a 	bl	8001f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2028      	movs	r0, #40	; 0x28
 8000892:	f000 ff8e 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000896:	2028      	movs	r0, #40	; 0x28
 8000898:	f000 ffa7 	bl	80017ea <HAL_NVIC_EnableIRQ>

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020800 	.word	0x40020800

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b4:	f000 fa14 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b8:	f000 f81c 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008bc:	f7ff ff82 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80008c0:	f7ff ff60 	bl	8000784 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008c4:	f000 f970 	bl	8000ba8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008c8:	f7ff fe5c 	bl	8000584 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if(flag==1)
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <main+0x38>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d1fb      	bne.n	80008cc <main+0x1c>
	{
		/*
		 * With this function the ADC executes the conversion of the channels and
		 * then stops since the continuous conversion mode is disabled
		 */
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCData, 5);
 80008d4:	2205      	movs	r2, #5
 80008d6:	4905      	ldr	r1, [pc, #20]	; (80008ec <main+0x3c>)
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <main+0x40>)
 80008da:	f000 fadb 	bl	8000e94 <HAL_ADC_Start_DMA>
		/*Wait for 500ms*/
		HAL_Delay(500);
 80008de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e2:	f000 fa6f 	bl	8000dc4 <HAL_Delay>
	if(flag==1)
 80008e6:	e7f1      	b.n	80008cc <main+0x1c>
 80008e8:	2000017c 	.word	0x2000017c
 80008ec:	20000134 	.word	0x20000134
 80008f0:	2000008c 	.word	0x2000008c

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2230      	movs	r2, #48	; 0x30
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f002 fd42 	bl	800338c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <SystemClock_Config+0xc8>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a26      	ldr	r2, [pc, #152]	; (80009bc <SystemClock_Config+0xc8>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <SystemClock_Config+0xc8>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <SystemClock_Config+0xcc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a20      	ldr	r2, [pc, #128]	; (80009c0 <SystemClock_Config+0xcc>)
 800093e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <SystemClock_Config+0xcc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000954:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000964:	2304      	movs	r3, #4
 8000966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000970:	2304      	movs	r3, #4
 8000972:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fc83 	bl	8002284 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000984:	f000 f852 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2103      	movs	r1, #3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fee5 	bl	8002774 <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009b0:	f000 f83c 	bl	8000a2c <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3750      	adds	r7, #80	; 0x50
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000

080009c4 <HAL_ADC_ConvCpltCallback>:
/*
 * This variable contains the message to be sent to the PC
 */
char stringBuffer[60];
void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af04      	add	r7, sp, #16
 80009ca:	6078      	str	r0, [r7, #4]
	uint8_t len=0;	/*Represents the lenght of the message*/
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]
	/*Let's construct the message
	 * NOTE:sprintf returns automatically the length of the message, so "strlen" can be avoided
	 * */
	len=sprintf(stringBuffer,"%u %u %u %u %u\r\n",ADCData[0],ADCData[1],ADCData[2],ADCData[3],ADCData[4]);
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_ADC_ConvCpltCallback+0x58>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_ADC_ConvCpltCallback+0x58>)
 80009d8:	885b      	ldrh	r3, [r3, #2]
 80009da:	461c      	mov	r4, r3
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_ADC_ConvCpltCallback+0x58>)
 80009de:	889b      	ldrh	r3, [r3, #4]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_ADC_ConvCpltCallback+0x58>)
 80009e4:	88db      	ldrh	r3, [r3, #6]
 80009e6:	4619      	mov	r1, r3
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_ADC_ConvCpltCallback+0x58>)
 80009ea:	891b      	ldrh	r3, [r3, #8]
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	9101      	str	r1, [sp, #4]
 80009f0:	9200      	str	r2, [sp, #0]
 80009f2:	4623      	mov	r3, r4
 80009f4:	4602      	mov	r2, r0
 80009f6:	490a      	ldr	r1, [pc, #40]	; (8000a20 <HAL_ADC_ConvCpltCallback+0x5c>)
 80009f8:	480a      	ldr	r0, [pc, #40]	; (8000a24 <HAL_ADC_ConvCpltCallback+0x60>)
 80009fa:	f002 fccf 	bl	800339c <siprintf>
 80009fe:	4603      	mov	r3, r0
 8000a00:	73fb      	strb	r3, [r7, #15]

	/*Let's send the message*/
	HAL_UART_Transmit(&huart2, (uint8_t *)stringBuffer, len, 10000);
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a0a:	4906      	ldr	r1, [pc, #24]	; (8000a24 <HAL_ADC_ConvCpltCallback+0x60>)
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <HAL_ADC_ConvCpltCallback+0x64>)
 8000a0e:	f002 f91e 	bl	8002c4e <HAL_UART_Transmit>
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000134 	.word	0x20000134
 8000a20:	08003c90 	.word	0x08003c90
 8000a24:	20000140 	.word	0x20000140
 8000a28:	20000184 	.word	0x20000184

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a76:	2007      	movs	r0, #7
 8000a78:	f000 fe90 	bl	800179c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad4:	f000 f956 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <EXTI15_10_IRQHandler>:
  * @brief This function handles EXTI line[15:10] interrupts.
  */


void EXTI15_10_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	 *This function is called AUTOMATICALLY by the hardware when the external
	 *Blue PushButton is pressed.
	 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ae0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ae4:	f001 fbaa 	bl	800223c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /*
   * The operator '!' is the NOT logic operator so transform a 0 into 1 and viceversa
   */
  flag=!flag;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <EXTI15_10_IRQHandler+0x24>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf0c      	ite	eq
 8000af0:	2301      	moveq	r3, #1
 8000af2:	2300      	movne	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b01      	ldr	r3, [pc, #4]	; (8000b00 <EXTI15_10_IRQHandler+0x24>)
 8000afa:	701a      	strb	r2, [r3, #0]
   *
   * But flag=!flag; is more compact
   */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000017c 	.word	0x2000017c

08000b04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <DMA2_Stream0_IRQHandler+0x10>)
 8000b0a:	f000 ff8f 	bl	8001a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000d4 	.word	0x200000d4

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f002 fbf6 	bl	8003338 <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20020000 	.word	0x20020000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	20000180 	.word	0x20000180
 8000b80:	200001e0 	.word	0x200001e0

08000b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_USART2_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000be0:	f001 ffe8 	bl	8002bb4 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f7ff ff1f 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000184 	.word	0x20000184
 8000bf8:	40004400 	.word	0x40004400

08000bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12b      	bne.n	8000c76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c56:	230c      	movs	r3, #12
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c66:	2307      	movs	r3, #7
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_UART_MspInit+0x8c>)
 8000c72:	f001 f945 	bl	8001f00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40004400 	.word	0x40004400
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca8:	4c0b      	ldr	r4, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb6:	f7ff ff65 	bl	8000b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f002 fb43 	bl	8003344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fdf7 	bl	80008b0 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cd0:	08003d08 	.word	0x08003d08
  ldr r2, =_sbss
 8000cd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cd8:	200001dc 	.word	0x200001dc

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <HAL_Init+0x40>)
 8000cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_Init+0x40>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_Init+0x40>)
 8000d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 fd47 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 f808 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fe90 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023c00 	.word	0x40023c00

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x54>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fd5f 	bl	8001806 <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00e      	b.n	8000d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d80a      	bhi.n	8000d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f000 fd27 	bl	80017b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <HAL_InitTick+0x5c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	200001c8 	.word	0x200001c8

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	200001c8 	.word	0x200001c8

08000dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff ffee 	bl	8000dac <HAL_GetTick>
 8000dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ddc:	d005      	beq.n	8000dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_Delay+0x44>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4413      	add	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dea:	bf00      	nop
 8000dec:	f7ff ffde 	bl	8000dac <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d8f7      	bhi.n	8000dec <HAL_Delay+0x28>
  {
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008

08000e0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e033      	b.n	8000e8a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d109      	bne.n	8000e3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fc34 	bl	8000698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d118      	bne.n	8000e7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e52:	f023 0302 	bic.w	r3, r3, #2
 8000e56:	f043 0202 	orr.w	r2, r3, #2
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fa4e 	bl	8001300 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f023 0303 	bic.w	r3, r3, #3
 8000e72:	f043 0201 	orr.w	r2, r3, #1
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	641a      	str	r2, [r3, #64]	; 0x40
 8000e7a:	e001      	b.n	8000e80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d101      	bne.n	8000eb2 <HAL_ADC_Start_DMA+0x1e>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e0ce      	b.n	8001050 <HAL_ADC_Start_DMA+0x1bc>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d018      	beq.n	8000efa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 0201 	orr.w	r2, r2, #1
 8000ed6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ed8:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <HAL_ADC_Start_DMA+0x1c4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a5f      	ldr	r2, [pc, #380]	; (800105c <HAL_ADC_Start_DMA+0x1c8>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	0c9a      	lsrs	r2, r3, #18
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000eec:	e002      	b.n	8000ef4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f9      	bne.n	8000eee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f08:	d107      	bne.n	8000f1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	f040 8086 	bne.w	8001036 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f32:	f023 0301 	bic.w	r3, r3, #1
 8000f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d007      	beq.n	8000f5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f68:	d106      	bne.n	8000f78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f023 0206 	bic.w	r2, r3, #6
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
 8000f76:	e002      	b.n	8000f7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f86:	4b36      	ldr	r3, [pc, #216]	; (8001060 <HAL_ADC_Start_DMA+0x1cc>)
 8000f88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8e:	4a35      	ldr	r2, [pc, #212]	; (8001064 <HAL_ADC_Start_DMA+0x1d0>)
 8000f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f96:	4a34      	ldr	r2, [pc, #208]	; (8001068 <HAL_ADC_Start_DMA+0x1d4>)
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9e:	4a33      	ldr	r2, [pc, #204]	; (800106c <HAL_ADC_Start_DMA+0x1d8>)
 8000fa0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000faa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000fba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	334c      	adds	r3, #76	; 0x4c
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f000 fcce 	bl	800197c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 031f 	and.w	r3, r3, #31
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10f      	bne.n	800100c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d129      	bne.n	800104e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	e020      	b.n	800104e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_ADC_Start_DMA+0x1dc>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d11b      	bne.n	800104e <HAL_ADC_Start_DMA+0x1ba>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d114      	bne.n	800104e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	e00b      	b.n	800104e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f043 0210 	orr.w	r2, r3, #16
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f043 0201 	orr.w	r2, r3, #1
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	431bde83 	.word	0x431bde83
 8001060:	40012300 	.word	0x40012300
 8001064:	080014f9 	.word	0x080014f9
 8001068:	080015b3 	.word	0x080015b3
 800106c:	080015cf 	.word	0x080015cf
 8001070:	40012000 	.word	0x40012000

08001074 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <HAL_ADC_ConfigChannel+0x1c>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e113      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x244>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d925      	bls.n	8001114 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68d9      	ldr	r1, [r3, #12]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	461a      	mov	r2, r3
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	3b1e      	subs	r3, #30
 80010de:	2207      	movs	r2, #7
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43da      	mvns	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	400a      	ands	r2, r1
 80010ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68d9      	ldr	r1, [r3, #12]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	4603      	mov	r3, r0
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4403      	add	r3, r0
 8001106:	3b1e      	subs	r3, #30
 8001108:	409a      	lsls	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	e022      	b.n	800115a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6919      	ldr	r1, [r3, #16]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	b29b      	uxth	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	2207      	movs	r2, #7
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	400a      	ands	r2, r1
 8001136:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6919      	ldr	r1, [r3, #16]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	4603      	mov	r3, r0
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4403      	add	r3, r0
 8001150:	409a      	lsls	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b06      	cmp	r3, #6
 8001160:	d824      	bhi.n	80011ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	3b05      	subs	r3, #5
 8001174:	221f      	movs	r2, #31
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	400a      	ands	r2, r1
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	3b05      	subs	r3, #5
 800119e:	fa00 f203 	lsl.w	r2, r0, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
 80011aa:	e04c      	b.n	8001246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b0c      	cmp	r3, #12
 80011b2:	d824      	bhi.n	80011fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	3b23      	subs	r3, #35	; 0x23
 80011c6:	221f      	movs	r2, #31
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43da      	mvns	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	400a      	ands	r2, r1
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	3b23      	subs	r3, #35	; 0x23
 80011f0:	fa00 f203 	lsl.w	r2, r0, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	631a      	str	r2, [r3, #48]	; 0x30
 80011fc:	e023      	b.n	8001246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3b41      	subs	r3, #65	; 0x41
 8001210:	221f      	movs	r2, #31
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	400a      	ands	r2, r1
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3b41      	subs	r3, #65	; 0x41
 800123a:	fa00 f203 	lsl.w	r2, r0, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <HAL_ADC_ConfigChannel+0x250>)
 8001248:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <HAL_ADC_ConfigChannel+0x254>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d10f      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x1d8>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b12      	cmp	r3, #18
 800125a:	d10b      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <HAL_ADC_ConfigChannel+0x254>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d12b      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x23a>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <HAL_ADC_ConfigChannel+0x258>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d003      	beq.n	8001290 <HAL_ADC_ConfigChannel+0x1f4>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b11      	cmp	r3, #17
 800128e:	d122      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <HAL_ADC_ConfigChannel+0x258>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d111      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_ADC_ConfigChannel+0x25c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_ADC_ConfigChannel+0x260>)
 80012b8:	fba2 2303 	umull	r2, r3, r2, r3
 80012bc:	0c9a      	lsrs	r2, r3, #18
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012c8:	e002      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f9      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40012300 	.word	0x40012300
 80012f0:	40012000 	.word	0x40012000
 80012f4:	10000012 	.word	0x10000012
 80012f8:	20000000 	.word	0x20000000
 80012fc:	431bde83 	.word	0x431bde83

08001300 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001308:	4b79      	ldr	r3, [pc, #484]	; (80014f0 <ADC_Init+0x1f0>)
 800130a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	431a      	orrs	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	021a      	lsls	r2, r3, #8
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6859      	ldr	r1, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800137a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6899      	ldr	r1, [r3, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	4a58      	ldr	r2, [pc, #352]	; (80014f4 <ADC_Init+0x1f4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d022      	beq.n	80013de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6899      	ldr	r1, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6899      	ldr	r1, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	e00f      	b.n	80013fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0202 	bic.w	r2, r2, #2
 800140c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6899      	ldr	r1, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7e1b      	ldrb	r3, [r3, #24]
 8001418:	005a      	lsls	r2, r3, #1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d01b      	beq.n	8001464 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800143a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800144a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6859      	ldr	r1, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	3b01      	subs	r3, #1
 8001458:	035a      	lsls	r2, r3, #13
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	e007      	b.n	8001474 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001472:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	3b01      	subs	r3, #1
 8001490:	051a      	lsls	r2, r3, #20
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6899      	ldr	r1, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014b6:	025a      	lsls	r2, r3, #9
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6899      	ldr	r1, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	029a      	lsls	r2, r3, #10
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	609a      	str	r2, [r3, #8]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40012300 	.word	0x40012300
 80014f4:	0f000001 	.word	0x0f000001

080014f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001504:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800150e:	2b00      	cmp	r3, #0
 8001510:	d13c      	bne.n	800158c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d12b      	bne.n	8001584 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001530:	2b00      	cmp	r3, #0
 8001532:	d127      	bne.n	8001584 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800153e:	2b00      	cmp	r3, #0
 8001540:	d006      	beq.n	8001550 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800154c:	2b00      	cmp	r3, #0
 800154e:	d119      	bne.n	8001584 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0220 	bic.w	r2, r2, #32
 800155e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d105      	bne.n	8001584 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f043 0201 	orr.w	r2, r3, #1
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7ff fa1d 	bl	80009c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800158a:	e00e      	b.n	80015aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f003 0310 	and.w	r3, r3, #16
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff fd75 	bl	8001088 <HAL_ADC_ErrorCallback>
}
 800159e:	e004      	b.n	80015aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	4798      	blx	r3
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fd57 	bl	8001074 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2240      	movs	r2, #64	; 0x40
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f043 0204 	orr.w	r2, r3, #4
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f7ff fd4a 	bl	8001088 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff29 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff3e 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff31 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa2 	bl	8001758 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff fabe 	bl	8000dac <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e099      	b.n	8001970 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800185c:	e00f      	b.n	800187e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800185e:	f7ff faa5 	bl	8000dac <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b05      	cmp	r3, #5
 800186a:	d908      	bls.n	800187e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2220      	movs	r2, #32
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2203      	movs	r2, #3
 8001876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e078      	b.n	8001970 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e8      	bne.n	800185e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	4b38      	ldr	r3, [pc, #224]	; (8001978 <HAL_DMA_Init+0x158>)
 8001898:	4013      	ands	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d107      	bne.n	80018e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	4313      	orrs	r3, r2
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f023 0307 	bic.w	r3, r3, #7
 80018fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	2b04      	cmp	r3, #4
 8001910:	d117      	bne.n	8001942 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4313      	orrs	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00e      	beq.n	8001942 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fa6f 	bl	8001e08 <DMA_CheckFifoParam>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2240      	movs	r2, #64	; 0x40
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800193e:	2301      	movs	r3, #1
 8001940:	e016      	b.n	8001970 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fa26 	bl	8001d9c <DMA_CalcBaseAndBitshift>
 8001950:	4603      	mov	r3, r0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001958:	223f      	movs	r2, #63	; 0x3f
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	f010803f 	.word	0xf010803f

0800197c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_DMA_Start_IT+0x26>
 800199e:	2302      	movs	r3, #2
 80019a0:	e040      	b.n	8001a24 <HAL_DMA_Start_IT+0xa8>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d12f      	bne.n	8001a16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2202      	movs	r2, #2
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f9b8 	bl	8001d40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	223f      	movs	r2, #63	; 0x3f
 80019d6:	409a      	lsls	r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0216 	orr.w	r2, r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d007      	beq.n	8001a04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0208 	orr.w	r2, r2, #8
 8001a02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e005      	b.n	8001a22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a38:	4b8e      	ldr	r3, [pc, #568]	; (8001c74 <HAL_DMA_IRQHandler+0x248>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a8e      	ldr	r2, [pc, #568]	; (8001c78 <HAL_DMA_IRQHandler+0x24c>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	0a9b      	lsrs	r3, r3, #10
 8001a44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a56:	2208      	movs	r2, #8
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d01a      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0204 	bic.w	r2, r2, #4
 8001a7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	2208      	movs	r2, #8
 8001a86:	409a      	lsls	r2, r3
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d012      	beq.n	8001ace <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aba:	2201      	movs	r2, #1
 8001abc:	409a      	lsls	r2, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	f043 0202 	orr.w	r2, r3, #2
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d012      	beq.n	8001b04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00b      	beq.n	8001b04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af0:	2204      	movs	r2, #4
 8001af2:	409a      	lsls	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afc:	f043 0204 	orr.w	r2, r3, #4
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b08:	2210      	movs	r2, #16
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d043      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d03c      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	2210      	movs	r2, #16
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d018      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d108      	bne.n	8001b5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d024      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	4798      	blx	r3
 8001b5a:	e01f      	b.n	8001b9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01b      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
 8001b6c:	e016      	b.n	8001b9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d107      	bne.n	8001b8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0208 	bic.w	r2, r2, #8
 8001b8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 808f 	beq.w	8001ccc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8087 	beq.w	8001ccc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d136      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0216 	bic.w	r2, r2, #22
 8001be4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d103      	bne.n	8001c06 <HAL_DMA_IRQHandler+0x1da>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d007      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0208 	bic.w	r2, r2, #8
 8001c14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	223f      	movs	r2, #63	; 0x3f
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d07e      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	4798      	blx	r3
        }
        return;
 8001c42:	e079      	b.n	8001d38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01d      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10d      	bne.n	8001c7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d031      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	4798      	blx	r3
 8001c70:	e02c      	b.n	8001ccc <HAL_DMA_IRQHandler+0x2a0>
 8001c72:	bf00      	nop
 8001c74:	20000000 	.word	0x20000000
 8001c78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d023      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
 8001c8c:	e01e      	b.n	8001ccc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10f      	bne.n	8001cbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0210 	bic.w	r2, r2, #16
 8001caa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d032      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d022      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2205      	movs	r2, #5
 8001ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d307      	bcc.n	8001d14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f2      	bne.n	8001cf8 <HAL_DMA_IRQHandler+0x2cc>
 8001d12:	e000      	b.n	8001d16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
 8001d36:	e000      	b.n	8001d3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d38:	bf00      	nop
    }
  }
}
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b40      	cmp	r3, #64	; 0x40
 8001d6c:	d108      	bne.n	8001d80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d7e:	e007      	b.n	8001d90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	60da      	str	r2, [r3, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	3b10      	subs	r3, #16
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <DMA_CalcBaseAndBitshift+0x64>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	091b      	lsrs	r3, r3, #4
 8001db4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001db6:	4a13      	ldr	r2, [pc, #76]	; (8001e04 <DMA_CalcBaseAndBitshift+0x68>)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d909      	bls.n	8001dde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dd2:	f023 0303 	bic.w	r3, r3, #3
 8001dd6:	1d1a      	adds	r2, r3, #4
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	659a      	str	r2, [r3, #88]	; 0x58
 8001ddc:	e007      	b.n	8001dee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	aaaaaaab 	.word	0xaaaaaaab
 8001e04:	08003cbc 	.word	0x08003cbc

08001e08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d11f      	bne.n	8001e62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d856      	bhi.n	8001ed6 <DMA_CheckFifoParam+0xce>
 8001e28:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <DMA_CheckFifoParam+0x28>)
 8001e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2e:	bf00      	nop
 8001e30:	08001e41 	.word	0x08001e41
 8001e34:	08001e53 	.word	0x08001e53
 8001e38:	08001e41 	.word	0x08001e41
 8001e3c:	08001ed7 	.word	0x08001ed7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d046      	beq.n	8001eda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e50:	e043      	b.n	8001eda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e5a:	d140      	bne.n	8001ede <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e60:	e03d      	b.n	8001ede <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e6a:	d121      	bne.n	8001eb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d837      	bhi.n	8001ee2 <DMA_CheckFifoParam+0xda>
 8001e72:	a201      	add	r2, pc, #4	; (adr r2, 8001e78 <DMA_CheckFifoParam+0x70>)
 8001e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e78:	08001e89 	.word	0x08001e89
 8001e7c:	08001e8f 	.word	0x08001e8f
 8001e80:	08001e89 	.word	0x08001e89
 8001e84:	08001ea1 	.word	0x08001ea1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e8c:	e030      	b.n	8001ef0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d025      	beq.n	8001ee6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e9e:	e022      	b.n	8001ee6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ea8:	d11f      	bne.n	8001eea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eae:	e01c      	b.n	8001eea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d903      	bls.n	8001ebe <DMA_CheckFifoParam+0xb6>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d003      	beq.n	8001ec4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ebc:	e018      	b.n	8001ef0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec2:	e015      	b.n	8001ef0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00e      	beq.n	8001eee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed4:	e00b      	b.n	8001eee <DMA_CheckFifoParam+0xe6>
      break;
 8001ed6:	bf00      	nop
 8001ed8:	e00a      	b.n	8001ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eda:	bf00      	nop
 8001edc:	e008      	b.n	8001ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ede:	bf00      	nop
 8001ee0:	e006      	b.n	8001ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ee2:	bf00      	nop
 8001ee4:	e004      	b.n	8001ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ee6:	bf00      	nop
 8001ee8:	e002      	b.n	8001ef0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001eea:	bf00      	nop
 8001eec:	e000      	b.n	8001ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eee:	bf00      	nop
    }
  } 
  
  return status; 
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop

08001f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	e159      	b.n	80021d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f040 8148 	bne.w	80021ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d005      	beq.n	8001f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d130      	bne.n	8001fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 0201 	and.w	r2, r3, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d017      	beq.n	8001ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d123      	bne.n	8002044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	08da      	lsrs	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3208      	adds	r2, #8
 8002004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	220f      	movs	r2, #15
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3208      	adds	r2, #8
 800203e:	69b9      	ldr	r1, [r7, #24]
 8002040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0203 	and.w	r2, r3, #3
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a2 	beq.w	80021ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <HAL_GPIO_Init+0x2e8>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a56      	ldr	r2, [pc, #344]	; (80021e8 <HAL_GPIO_Init+0x2e8>)
 8002090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <HAL_GPIO_Init+0x2e8>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a2:	4a52      	ldr	r2, [pc, #328]	; (80021ec <HAL_GPIO_Init+0x2ec>)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	220f      	movs	r2, #15
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a49      	ldr	r2, [pc, #292]	; (80021f0 <HAL_GPIO_Init+0x2f0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d019      	beq.n	8002102 <HAL_GPIO_Init+0x202>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a48      	ldr	r2, [pc, #288]	; (80021f4 <HAL_GPIO_Init+0x2f4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <HAL_GPIO_Init+0x1fe>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a47      	ldr	r2, [pc, #284]	; (80021f8 <HAL_GPIO_Init+0x2f8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00d      	beq.n	80020fa <HAL_GPIO_Init+0x1fa>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a46      	ldr	r2, [pc, #280]	; (80021fc <HAL_GPIO_Init+0x2fc>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <HAL_GPIO_Init+0x1f6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a45      	ldr	r2, [pc, #276]	; (8002200 <HAL_GPIO_Init+0x300>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d101      	bne.n	80020f2 <HAL_GPIO_Init+0x1f2>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e008      	b.n	8002104 <HAL_GPIO_Init+0x204>
 80020f2:	2307      	movs	r3, #7
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x204>
 80020f6:	2303      	movs	r3, #3
 80020f8:	e004      	b.n	8002104 <HAL_GPIO_Init+0x204>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_Init+0x204>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_GPIO_Init+0x204>
 8002102:	2300      	movs	r3, #0
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	f002 0203 	and.w	r2, r2, #3
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	4093      	lsls	r3, r2
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002114:	4935      	ldr	r1, [pc, #212]	; (80021ec <HAL_GPIO_Init+0x2ec>)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3302      	adds	r3, #2
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002122:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_GPIO_Init+0x304>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002146:	4a2f      	ldr	r2, [pc, #188]	; (8002204 <HAL_GPIO_Init+0x304>)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_GPIO_Init+0x304>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002170:	4a24      	ldr	r2, [pc, #144]	; (8002204 <HAL_GPIO_Init+0x304>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_GPIO_Init+0x304>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800219a:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_GPIO_Init+0x304>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_GPIO_Init+0x304>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c4:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <HAL_GPIO_Init+0x304>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3301      	adds	r3, #1
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	2b0f      	cmp	r3, #15
 80021d4:	f67f aea2 	bls.w	8001f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40013800 	.word	0x40013800
 80021f0:	40020000 	.word	0x40020000
 80021f4:	40020400 	.word	0x40020400
 80021f8:	40020800 	.word	0x40020800
 80021fc:	40020c00 	.word	0x40020c00
 8002200:	40021000 	.word	0x40021000
 8002204:	40013c00 	.word	0x40013c00

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002224:	e003      	b.n	800222e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	041a      	lsls	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	619a      	str	r2, [r3, #24]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d006      	beq.n	8002260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f806 	bl	800226c <HAL_GPIO_EXTI_Callback>
  }
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40013c00 	.word	0x40013c00

0800226c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e267      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d075      	beq.n	800238e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022a2:	4b88      	ldr	r3, [pc, #544]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d00c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ae:	4b85      	ldr	r3, [pc, #532]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d112      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ba:	4b82      	ldr	r3, [pc, #520]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c6:	d10b      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	4b7e      	ldr	r3, [pc, #504]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d05b      	beq.n	800238c <HAL_RCC_OscConfig+0x108>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d157      	bne.n	800238c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e242      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e8:	d106      	bne.n	80022f8 <HAL_RCC_OscConfig+0x74>
 80022ea:	4b76      	ldr	r3, [pc, #472]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a75      	ldr	r2, [pc, #468]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e01d      	b.n	8002334 <HAL_RCC_OscConfig+0xb0>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x98>
 8002302:	4b70      	ldr	r3, [pc, #448]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6f      	ldr	r2, [pc, #444]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	4b6d      	ldr	r3, [pc, #436]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6c      	ldr	r2, [pc, #432]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e00b      	b.n	8002334 <HAL_RCC_OscConfig+0xb0>
 800231c:	4b69      	ldr	r3, [pc, #420]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a68      	ldr	r2, [pc, #416]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a65      	ldr	r2, [pc, #404]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 800232e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d013      	beq.n	8002364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7fe fd36 	bl	8000dac <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002344:	f7fe fd32 	bl	8000dac <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	; 0x64
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e207      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	4b5b      	ldr	r3, [pc, #364]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0xc0>
 8002362:	e014      	b.n	800238e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fd22 	bl	8000dac <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800236c:	f7fe fd1e 	bl	8000dac <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1f3      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	4b51      	ldr	r3, [pc, #324]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0xe8>
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d063      	beq.n	8002462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800239a:	4b4a      	ldr	r3, [pc, #296]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d11c      	bne.n	80023ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b2:	4b44      	ldr	r3, [pc, #272]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d116      	bne.n	80023ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_RCC_OscConfig+0x152>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d001      	beq.n	80023d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e1c7      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4937      	ldr	r1, [pc, #220]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	e03a      	b.n	8002462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f4:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <HAL_RCC_OscConfig+0x244>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7fe fcd7 	bl	8000dac <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002402:	f7fe fcd3 	bl	8000dac <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e1a8      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002420:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4925      	ldr	r1, [pc, #148]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
 8002434:	e015      	b.n	8002462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002436:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_RCC_OscConfig+0x244>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fcb6 	bl	8000dac <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002444:	f7fe fcb2 	bl	8000dac <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e187      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d036      	beq.n	80024dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d016      	beq.n	80024a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_RCC_OscConfig+0x248>)
 8002478:	2201      	movs	r2, #1
 800247a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7fe fc96 	bl	8000dac <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002484:	f7fe fc92 	bl	8000dac <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e167      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x200>
 80024a2:	e01b      	b.n	80024dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_OscConfig+0x248>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7fe fc7f 	bl	8000dac <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b0:	e00e      	b.n	80024d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b2:	f7fe fc7b 	bl	8000dac <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d907      	bls.n	80024d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e150      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	42470000 	.word	0x42470000
 80024cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 80024d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1ea      	bne.n	80024b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8097 	beq.w	8002618 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4b81      	ldr	r3, [pc, #516]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10f      	bne.n	800251a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	4b7d      	ldr	r3, [pc, #500]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a7c      	ldr	r2, [pc, #496]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b7a      	ldr	r3, [pc, #488]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002516:	2301      	movs	r3, #1
 8002518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4b77      	ldr	r3, [pc, #476]	; (80026f8 <HAL_RCC_OscConfig+0x474>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d118      	bne.n	8002558 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002526:	4b74      	ldr	r3, [pc, #464]	; (80026f8 <HAL_RCC_OscConfig+0x474>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a73      	ldr	r2, [pc, #460]	; (80026f8 <HAL_RCC_OscConfig+0x474>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002532:	f7fe fc3b 	bl	8000dac <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253a:	f7fe fc37 	bl	8000dac <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e10c      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	4b6a      	ldr	r3, [pc, #424]	; (80026f8 <HAL_RCC_OscConfig+0x474>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x2ea>
 8002560:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a63      	ldr	r2, [pc, #396]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
 800256c:	e01c      	b.n	80025a8 <HAL_RCC_OscConfig+0x324>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b05      	cmp	r3, #5
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x30c>
 8002576:	4b5f      	ldr	r3, [pc, #380]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a5e      	ldr	r2, [pc, #376]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	6713      	str	r3, [r2, #112]	; 0x70
 8002582:	4b5c      	ldr	r3, [pc, #368]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	4a5b      	ldr	r2, [pc, #364]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6713      	str	r3, [r2, #112]	; 0x70
 800258e:	e00b      	b.n	80025a8 <HAL_RCC_OscConfig+0x324>
 8002590:	4b58      	ldr	r3, [pc, #352]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	4a57      	ldr	r2, [pc, #348]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
 800259c:	4b55      	ldr	r3, [pc, #340]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a54      	ldr	r2, [pc, #336]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 80025a2:	f023 0304 	bic.w	r3, r3, #4
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d015      	beq.n	80025dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7fe fbfc 	bl	8000dac <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe fbf8 	bl	8000dac <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0cb      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	4b49      	ldr	r3, [pc, #292]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0ee      	beq.n	80025b8 <HAL_RCC_OscConfig+0x334>
 80025da:	e014      	b.n	8002606 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7fe fbe6 	bl	8000dac <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7fe fbe2 	bl	8000dac <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e0b5      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fa:	4b3e      	ldr	r3, [pc, #248]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1ee      	bne.n	80025e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260c:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	4a38      	ldr	r2, [pc, #224]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002616:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80a1 	beq.w	8002764 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002622:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b08      	cmp	r3, #8
 800262c:	d05c      	beq.n	80026e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d141      	bne.n	80026ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b31      	ldr	r3, [pc, #196]	; (80026fc <HAL_RCC_OscConfig+0x478>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe fbb6 	bl	8000dac <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fbb2 	bl	8000dac <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e087      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	019b      	lsls	r3, r3, #6
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	3b01      	subs	r3, #1
 800267c:	041b      	lsls	r3, r3, #16
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	491b      	ldr	r1, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCC_OscConfig+0x478>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fe fb8b 	bl	8000dac <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269a:	f7fe fb87 	bl	8000dac <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e05c      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x416>
 80026b8:	e054      	b.n	8002764 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCC_OscConfig+0x478>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe fb74 	bl	8000dac <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fb70 	bl	8000dac <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e045      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_OscConfig+0x470>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x444>
 80026e6:	e03d      	b.n	8002764 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e038      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40007000 	.word	0x40007000
 80026fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002700:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_RCC_OscConfig+0x4ec>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d028      	beq.n	8002760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002718:	429a      	cmp	r2, r3
 800271a:	d121      	bne.n	8002760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d11a      	bne.n	8002760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002730:	4013      	ands	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002738:	4293      	cmp	r3, r2
 800273a:	d111      	bne.n	8002760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	3b01      	subs	r3, #1
 800274a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d107      	bne.n	8002760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800

08002774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0cc      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002788:	4b68      	ldr	r3, [pc, #416]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d90c      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b65      	ldr	r3, [pc, #404]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0b8      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c8:	4b59      	ldr	r3, [pc, #356]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4a58      	ldr	r2, [pc, #352]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e0:	4b53      	ldr	r3, [pc, #332]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a52      	ldr	r2, [pc, #328]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ec:	4b50      	ldr	r3, [pc, #320]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	494d      	ldr	r1, [pc, #308]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d044      	beq.n	8002894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d119      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e07f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d003      	beq.n	8002832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800282e:	2b03      	cmp	r3, #3
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002832:	4b3f      	ldr	r3, [pc, #252]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e06f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002842:	4b3b      	ldr	r3, [pc, #236]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e067      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002852:	4b37      	ldr	r3, [pc, #220]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f023 0203 	bic.w	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4934      	ldr	r1, [pc, #208]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002864:	f7fe faa2 	bl	8000dac <HAL_GetTick>
 8002868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	e00a      	b.n	8002882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286c:	f7fe fa9e 	bl	8000dac <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e04f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 020c 	and.w	r2, r3, #12
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	429a      	cmp	r2, r3
 8002892:	d1eb      	bne.n	800286c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002894:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d20c      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b22      	ldr	r3, [pc, #136]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e032      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4916      	ldr	r1, [pc, #88]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	490e      	ldr	r1, [pc, #56]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028fa:	f000 f821 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	490a      	ldr	r1, [pc, #40]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	5ccb      	ldrb	r3, [r1, r3]
 800290e:	fa22 f303 	lsr.w	r3, r2, r3
 8002912:	4a09      	ldr	r2, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fa02 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023c00 	.word	0x40023c00
 8002930:	40023800 	.word	0x40023800
 8002934:	08003ca4 	.word	0x08003ca4
 8002938:	20000000 	.word	0x20000000
 800293c:	20000004 	.word	0x20000004

08002940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002944:	b094      	sub	sp, #80	; 0x50
 8002946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	647b      	str	r3, [r7, #68]	; 0x44
 800294c:	2300      	movs	r3, #0
 800294e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002950:	2300      	movs	r3, #0
 8002952:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002958:	4b79      	ldr	r3, [pc, #484]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d00d      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x40>
 8002964:	2b08      	cmp	r3, #8
 8002966:	f200 80e1 	bhi.w	8002b2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x34>
 800296e:	2b04      	cmp	r3, #4
 8002970:	d003      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x3a>
 8002972:	e0db      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b73      	ldr	r3, [pc, #460]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002976:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002978:	e0db      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800297a:	4b73      	ldr	r3, [pc, #460]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x208>)
 800297c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800297e:	e0d8      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002980:	4b6f      	ldr	r3, [pc, #444]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002988:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800298a:	4b6d      	ldr	r3, [pc, #436]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d063      	beq.n	8002a5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002996:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	099b      	lsrs	r3, r3, #6
 800299c:	2200      	movs	r2, #0
 800299e:	63bb      	str	r3, [r7, #56]	; 0x38
 80029a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
 80029aa:	2300      	movs	r3, #0
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
 80029ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029b2:	4622      	mov	r2, r4
 80029b4:	462b      	mov	r3, r5
 80029b6:	f04f 0000 	mov.w	r0, #0
 80029ba:	f04f 0100 	mov.w	r1, #0
 80029be:	0159      	lsls	r1, r3, #5
 80029c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c4:	0150      	lsls	r0, r2, #5
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4621      	mov	r1, r4
 80029cc:	1a51      	subs	r1, r2, r1
 80029ce:	6139      	str	r1, [r7, #16]
 80029d0:	4629      	mov	r1, r5
 80029d2:	eb63 0301 	sbc.w	r3, r3, r1
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029e4:	4659      	mov	r1, fp
 80029e6:	018b      	lsls	r3, r1, #6
 80029e8:	4651      	mov	r1, sl
 80029ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ee:	4651      	mov	r1, sl
 80029f0:	018a      	lsls	r2, r1, #6
 80029f2:	4651      	mov	r1, sl
 80029f4:	ebb2 0801 	subs.w	r8, r2, r1
 80029f8:	4659      	mov	r1, fp
 80029fa:	eb63 0901 	sbc.w	r9, r3, r1
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a12:	4690      	mov	r8, r2
 8002a14:	4699      	mov	r9, r3
 8002a16:	4623      	mov	r3, r4
 8002a18:	eb18 0303 	adds.w	r3, r8, r3
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	462b      	mov	r3, r5
 8002a20:	eb49 0303 	adc.w	r3, r9, r3
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a32:	4629      	mov	r1, r5
 8002a34:	024b      	lsls	r3, r1, #9
 8002a36:	4621      	mov	r1, r4
 8002a38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	024a      	lsls	r2, r1, #9
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a46:	2200      	movs	r2, #0
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a50:	f7fd fc16 	bl	8000280 <__aeabi_uldivmod>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4613      	mov	r3, r2
 8002a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a5c:	e058      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5e:	4b38      	ldr	r3, [pc, #224]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	099b      	lsrs	r3, r3, #6
 8002a64:	2200      	movs	r2, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	4611      	mov	r1, r2
 8002a6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	2300      	movs	r3, #0
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
 8002a74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a78:	4642      	mov	r2, r8
 8002a7a:	464b      	mov	r3, r9
 8002a7c:	f04f 0000 	mov.w	r0, #0
 8002a80:	f04f 0100 	mov.w	r1, #0
 8002a84:	0159      	lsls	r1, r3, #5
 8002a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a8a:	0150      	lsls	r0, r2, #5
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4641      	mov	r1, r8
 8002a92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a96:	4649      	mov	r1, r9
 8002a98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002aa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002aac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ab0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ab4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	00eb      	lsls	r3, r5, #3
 8002ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ac6:	00e2      	lsls	r2, r4, #3
 8002ac8:	4614      	mov	r4, r2
 8002aca:	461d      	mov	r5, r3
 8002acc:	4643      	mov	r3, r8
 8002ace:	18e3      	adds	r3, r4, r3
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	eb45 0303 	adc.w	r3, r5, r3
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	028b      	lsls	r3, r1, #10
 8002aea:	4621      	mov	r1, r4
 8002aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002af0:	4621      	mov	r1, r4
 8002af2:	028a      	lsls	r2, r1, #10
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afa:	2200      	movs	r2, #0
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	61fa      	str	r2, [r7, #28]
 8002b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b04:	f7fd fbbc 	bl	8000280 <__aeabi_uldivmod>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	0c1b      	lsrs	r3, r3, #16
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b2a:	e002      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3750      	adds	r7, #80	; 0x50
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	00f42400 	.word	0x00f42400
 8002b48:	007a1200 	.word	0x007a1200

08002b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000000 	.word	0x20000000

08002b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b68:	f7ff fff0 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	0a9b      	lsrs	r3, r3, #10
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4903      	ldr	r1, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	08003cb4 	.word	0x08003cb4

08002b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b90:	f7ff ffdc 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	0b5b      	lsrs	r3, r3, #13
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4903      	ldr	r1, [pc, #12]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	08003cb4 	.word	0x08003cb4

08002bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e03f      	b.n	8002c46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe f80e 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f929 	bl	8002e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b08a      	sub	sp, #40	; 0x28
 8002c52:	af02      	add	r7, sp, #8
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d17c      	bne.n	8002d68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_UART_Transmit+0x2c>
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e075      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_UART_Transmit+0x3e>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e06e      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2221      	movs	r2, #33	; 0x21
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ca2:	f7fe f883 	bl	8000dac <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbc:	d108      	bne.n	8002cd0 <HAL_UART_Transmit+0x82>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d104      	bne.n	8002cd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	e003      	b.n	8002cd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ce0:	e02a      	b.n	8002d38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2180      	movs	r1, #128	; 0x80
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f840 	bl	8002d72 <UART_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e036      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10b      	bne.n	8002d1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	3302      	adds	r3, #2
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	e007      	b.n	8002d2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	3301      	adds	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1cf      	bne.n	8002ce2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2140      	movs	r1, #64	; 0x40
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f810 	bl	8002d72 <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e006      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e000      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d68:	2302      	movs	r3, #2
  }
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b090      	sub	sp, #64	; 0x40
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d82:	e050      	b.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d04c      	beq.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d92:	f7fe f80b 	bl	8000dac <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d241      	bcs.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	330c      	adds	r3, #12
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dc2:	637a      	str	r2, [r7, #52]	; 0x34
 8002dc4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e5      	bne.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3314      	adds	r3, #20
 8002ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	613b      	str	r3, [r7, #16]
   return(result);
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002df6:	623a      	str	r2, [r7, #32]
 8002df8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	69f9      	ldr	r1, [r7, #28]
 8002dfc:	6a3a      	ldr	r2, [r7, #32]
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e5      	bne.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e00f      	b.n	8002e46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d09f      	beq.n	8002d84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3740      	adds	r7, #64	; 0x40
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e54:	b0c0      	sub	sp, #256	; 0x100
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6c:	68d9      	ldr	r1, [r3, #12]
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	ea40 0301 	orr.w	r3, r0, r1
 8002e78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ea8:	f021 010c 	bic.w	r1, r1, #12
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eca:	6999      	ldr	r1, [r3, #24]
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	ea40 0301 	orr.w	r3, r0, r1
 8002ed6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4b8f      	ldr	r3, [pc, #572]	; (800311c <UART_SetConfig+0x2cc>)
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d005      	beq.n	8002ef0 <UART_SetConfig+0xa0>
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b8d      	ldr	r3, [pc, #564]	; (8003120 <UART_SetConfig+0x2d0>)
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d104      	bne.n	8002efa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ef0:	f7ff fe4c 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 8002ef4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ef8:	e003      	b.n	8002f02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002efa:	f7ff fe33 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 8002efe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f0c:	f040 810c 	bne.w	8003128 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f22:	4622      	mov	r2, r4
 8002f24:	462b      	mov	r3, r5
 8002f26:	1891      	adds	r1, r2, r2
 8002f28:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f2a:	415b      	adcs	r3, r3
 8002f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f32:	4621      	mov	r1, r4
 8002f34:	eb12 0801 	adds.w	r8, r2, r1
 8002f38:	4629      	mov	r1, r5
 8002f3a:	eb43 0901 	adc.w	r9, r3, r1
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f52:	4690      	mov	r8, r2
 8002f54:	4699      	mov	r9, r3
 8002f56:	4623      	mov	r3, r4
 8002f58:	eb18 0303 	adds.w	r3, r8, r3
 8002f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f60:	462b      	mov	r3, r5
 8002f62:	eb49 0303 	adc.w	r3, r9, r3
 8002f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f7e:	460b      	mov	r3, r1
 8002f80:	18db      	adds	r3, r3, r3
 8002f82:	653b      	str	r3, [r7, #80]	; 0x50
 8002f84:	4613      	mov	r3, r2
 8002f86:	eb42 0303 	adc.w	r3, r2, r3
 8002f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f94:	f7fd f974 	bl	8000280 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4b61      	ldr	r3, [pc, #388]	; (8003124 <UART_SetConfig+0x2d4>)
 8002f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	011c      	lsls	r4, r3, #4
 8002fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002faa:	2200      	movs	r2, #0
 8002fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fb8:	4642      	mov	r2, r8
 8002fba:	464b      	mov	r3, r9
 8002fbc:	1891      	adds	r1, r2, r2
 8002fbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fc0:	415b      	adcs	r3, r3
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fc8:	4641      	mov	r1, r8
 8002fca:	eb12 0a01 	adds.w	sl, r2, r1
 8002fce:	4649      	mov	r1, r9
 8002fd0:	eb43 0b01 	adc.w	fp, r3, r1
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fe0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fe8:	4692      	mov	sl, r2
 8002fea:	469b      	mov	fp, r3
 8002fec:	4643      	mov	r3, r8
 8002fee:	eb1a 0303 	adds.w	r3, sl, r3
 8002ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	eb4b 0303 	adc.w	r3, fp, r3
 8002ffc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800300c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003010:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003014:	460b      	mov	r3, r1
 8003016:	18db      	adds	r3, r3, r3
 8003018:	643b      	str	r3, [r7, #64]	; 0x40
 800301a:	4613      	mov	r3, r2
 800301c:	eb42 0303 	adc.w	r3, r2, r3
 8003020:	647b      	str	r3, [r7, #68]	; 0x44
 8003022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003026:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800302a:	f7fd f929 	bl	8000280 <__aeabi_uldivmod>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4611      	mov	r1, r2
 8003034:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <UART_SetConfig+0x2d4>)
 8003036:	fba3 2301 	umull	r2, r3, r3, r1
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2264      	movs	r2, #100	; 0x64
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	1acb      	subs	r3, r1, r3
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800304a:	4b36      	ldr	r3, [pc, #216]	; (8003124 <UART_SetConfig+0x2d4>)
 800304c:	fba3 2302 	umull	r2, r3, r3, r2
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003058:	441c      	add	r4, r3
 800305a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305e:	2200      	movs	r2, #0
 8003060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003064:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003068:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800306c:	4642      	mov	r2, r8
 800306e:	464b      	mov	r3, r9
 8003070:	1891      	adds	r1, r2, r2
 8003072:	63b9      	str	r1, [r7, #56]	; 0x38
 8003074:	415b      	adcs	r3, r3
 8003076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003078:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800307c:	4641      	mov	r1, r8
 800307e:	1851      	adds	r1, r2, r1
 8003080:	6339      	str	r1, [r7, #48]	; 0x30
 8003082:	4649      	mov	r1, r9
 8003084:	414b      	adcs	r3, r1
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003094:	4659      	mov	r1, fp
 8003096:	00cb      	lsls	r3, r1, #3
 8003098:	4651      	mov	r1, sl
 800309a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800309e:	4651      	mov	r1, sl
 80030a0:	00ca      	lsls	r2, r1, #3
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	4642      	mov	r2, r8
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030b0:	464b      	mov	r3, r9
 80030b2:	460a      	mov	r2, r1
 80030b4:	eb42 0303 	adc.w	r3, r2, r3
 80030b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030d0:	460b      	mov	r3, r1
 80030d2:	18db      	adds	r3, r3, r3
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d6:	4613      	mov	r3, r2
 80030d8:	eb42 0303 	adc.w	r3, r2, r3
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030e6:	f7fd f8cb 	bl	8000280 <__aeabi_uldivmod>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <UART_SetConfig+0x2d4>)
 80030f0:	fba3 1302 	umull	r1, r3, r3, r2
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	2164      	movs	r1, #100	; 0x64
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	3332      	adds	r3, #50	; 0x32
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <UART_SetConfig+0x2d4>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	f003 0207 	and.w	r2, r3, #7
 800310e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4422      	add	r2, r4
 8003116:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003118:	e105      	b.n	8003326 <UART_SetConfig+0x4d6>
 800311a:	bf00      	nop
 800311c:	40011000 	.word	0x40011000
 8003120:	40011400 	.word	0x40011400
 8003124:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800312c:	2200      	movs	r2, #0
 800312e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003132:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003136:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800313a:	4642      	mov	r2, r8
 800313c:	464b      	mov	r3, r9
 800313e:	1891      	adds	r1, r2, r2
 8003140:	6239      	str	r1, [r7, #32]
 8003142:	415b      	adcs	r3, r3
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
 8003146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800314a:	4641      	mov	r1, r8
 800314c:	1854      	adds	r4, r2, r1
 800314e:	4649      	mov	r1, r9
 8003150:	eb43 0501 	adc.w	r5, r3, r1
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	00eb      	lsls	r3, r5, #3
 800315e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003162:	00e2      	lsls	r2, r4, #3
 8003164:	4614      	mov	r4, r2
 8003166:	461d      	mov	r5, r3
 8003168:	4643      	mov	r3, r8
 800316a:	18e3      	adds	r3, r4, r3
 800316c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003170:	464b      	mov	r3, r9
 8003172:	eb45 0303 	adc.w	r3, r5, r3
 8003176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003186:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003196:	4629      	mov	r1, r5
 8003198:	008b      	lsls	r3, r1, #2
 800319a:	4621      	mov	r1, r4
 800319c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031a0:	4621      	mov	r1, r4
 80031a2:	008a      	lsls	r2, r1, #2
 80031a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031a8:	f7fd f86a 	bl	8000280 <__aeabi_uldivmod>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4b60      	ldr	r3, [pc, #384]	; (8003334 <UART_SetConfig+0x4e4>)
 80031b2:	fba3 2302 	umull	r2, r3, r3, r2
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	011c      	lsls	r4, r3, #4
 80031ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031cc:	4642      	mov	r2, r8
 80031ce:	464b      	mov	r3, r9
 80031d0:	1891      	adds	r1, r2, r2
 80031d2:	61b9      	str	r1, [r7, #24]
 80031d4:	415b      	adcs	r3, r3
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031dc:	4641      	mov	r1, r8
 80031de:	1851      	adds	r1, r2, r1
 80031e0:	6139      	str	r1, [r7, #16]
 80031e2:	4649      	mov	r1, r9
 80031e4:	414b      	adcs	r3, r1
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031f4:	4659      	mov	r1, fp
 80031f6:	00cb      	lsls	r3, r1, #3
 80031f8:	4651      	mov	r1, sl
 80031fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fe:	4651      	mov	r1, sl
 8003200:	00ca      	lsls	r2, r1, #3
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	4603      	mov	r3, r0
 8003208:	4642      	mov	r2, r8
 800320a:	189b      	adds	r3, r3, r2
 800320c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003210:	464b      	mov	r3, r9
 8003212:	460a      	mov	r2, r1
 8003214:	eb42 0303 	adc.w	r3, r2, r3
 8003218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	67bb      	str	r3, [r7, #120]	; 0x78
 8003226:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003234:	4649      	mov	r1, r9
 8003236:	008b      	lsls	r3, r1, #2
 8003238:	4641      	mov	r1, r8
 800323a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800323e:	4641      	mov	r1, r8
 8003240:	008a      	lsls	r2, r1, #2
 8003242:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003246:	f7fd f81b 	bl	8000280 <__aeabi_uldivmod>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4b39      	ldr	r3, [pc, #228]	; (8003334 <UART_SetConfig+0x4e4>)
 8003250:	fba3 1302 	umull	r1, r3, r3, r2
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	2164      	movs	r1, #100	; 0x64
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	3332      	adds	r3, #50	; 0x32
 8003262:	4a34      	ldr	r2, [pc, #208]	; (8003334 <UART_SetConfig+0x4e4>)
 8003264:	fba2 2303 	umull	r2, r3, r2, r3
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326e:	441c      	add	r4, r3
 8003270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003274:	2200      	movs	r2, #0
 8003276:	673b      	str	r3, [r7, #112]	; 0x70
 8003278:	677a      	str	r2, [r7, #116]	; 0x74
 800327a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800327e:	4642      	mov	r2, r8
 8003280:	464b      	mov	r3, r9
 8003282:	1891      	adds	r1, r2, r2
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	415b      	adcs	r3, r3
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800328e:	4641      	mov	r1, r8
 8003290:	1851      	adds	r1, r2, r1
 8003292:	6039      	str	r1, [r7, #0]
 8003294:	4649      	mov	r1, r9
 8003296:	414b      	adcs	r3, r1
 8003298:	607b      	str	r3, [r7, #4]
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032a6:	4659      	mov	r1, fp
 80032a8:	00cb      	lsls	r3, r1, #3
 80032aa:	4651      	mov	r1, sl
 80032ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032b0:	4651      	mov	r1, sl
 80032b2:	00ca      	lsls	r2, r1, #3
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	4603      	mov	r3, r0
 80032ba:	4642      	mov	r2, r8
 80032bc:	189b      	adds	r3, r3, r2
 80032be:	66bb      	str	r3, [r7, #104]	; 0x68
 80032c0:	464b      	mov	r3, r9
 80032c2:	460a      	mov	r2, r1
 80032c4:	eb42 0303 	adc.w	r3, r2, r3
 80032c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	663b      	str	r3, [r7, #96]	; 0x60
 80032d4:	667a      	str	r2, [r7, #100]	; 0x64
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032e2:	4649      	mov	r1, r9
 80032e4:	008b      	lsls	r3, r1, #2
 80032e6:	4641      	mov	r1, r8
 80032e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ec:	4641      	mov	r1, r8
 80032ee:	008a      	lsls	r2, r1, #2
 80032f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032f4:	f7fc ffc4 	bl	8000280 <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <UART_SetConfig+0x4e4>)
 80032fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2164      	movs	r1, #100	; 0x64
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	3332      	adds	r3, #50	; 0x32
 8003310:	4a08      	ldr	r2, [pc, #32]	; (8003334 <UART_SetConfig+0x4e4>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	f003 020f 	and.w	r2, r3, #15
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4422      	add	r2, r4
 8003324:	609a      	str	r2, [r3, #8]
}
 8003326:	bf00      	nop
 8003328:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800332c:	46bd      	mov	sp, r7
 800332e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003332:	bf00      	nop
 8003334:	51eb851f 	.word	0x51eb851f

08003338 <__errno>:
 8003338:	4b01      	ldr	r3, [pc, #4]	; (8003340 <__errno+0x8>)
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	2000000c 	.word	0x2000000c

08003344 <__libc_init_array>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	4d0d      	ldr	r5, [pc, #52]	; (800337c <__libc_init_array+0x38>)
 8003348:	4c0d      	ldr	r4, [pc, #52]	; (8003380 <__libc_init_array+0x3c>)
 800334a:	1b64      	subs	r4, r4, r5
 800334c:	10a4      	asrs	r4, r4, #2
 800334e:	2600      	movs	r6, #0
 8003350:	42a6      	cmp	r6, r4
 8003352:	d109      	bne.n	8003368 <__libc_init_array+0x24>
 8003354:	4d0b      	ldr	r5, [pc, #44]	; (8003384 <__libc_init_array+0x40>)
 8003356:	4c0c      	ldr	r4, [pc, #48]	; (8003388 <__libc_init_array+0x44>)
 8003358:	f000 fc8e 	bl	8003c78 <_init>
 800335c:	1b64      	subs	r4, r4, r5
 800335e:	10a4      	asrs	r4, r4, #2
 8003360:	2600      	movs	r6, #0
 8003362:	42a6      	cmp	r6, r4
 8003364:	d105      	bne.n	8003372 <__libc_init_array+0x2e>
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	f855 3b04 	ldr.w	r3, [r5], #4
 800336c:	4798      	blx	r3
 800336e:	3601      	adds	r6, #1
 8003370:	e7ee      	b.n	8003350 <__libc_init_array+0xc>
 8003372:	f855 3b04 	ldr.w	r3, [r5], #4
 8003376:	4798      	blx	r3
 8003378:	3601      	adds	r6, #1
 800337a:	e7f2      	b.n	8003362 <__libc_init_array+0x1e>
 800337c:	08003d00 	.word	0x08003d00
 8003380:	08003d00 	.word	0x08003d00
 8003384:	08003d00 	.word	0x08003d00
 8003388:	08003d04 	.word	0x08003d04

0800338c <memset>:
 800338c:	4402      	add	r2, r0
 800338e:	4603      	mov	r3, r0
 8003390:	4293      	cmp	r3, r2
 8003392:	d100      	bne.n	8003396 <memset+0xa>
 8003394:	4770      	bx	lr
 8003396:	f803 1b01 	strb.w	r1, [r3], #1
 800339a:	e7f9      	b.n	8003390 <memset+0x4>

0800339c <siprintf>:
 800339c:	b40e      	push	{r1, r2, r3}
 800339e:	b500      	push	{lr}
 80033a0:	b09c      	sub	sp, #112	; 0x70
 80033a2:	ab1d      	add	r3, sp, #116	; 0x74
 80033a4:	9002      	str	r0, [sp, #8]
 80033a6:	9006      	str	r0, [sp, #24]
 80033a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033ac:	4809      	ldr	r0, [pc, #36]	; (80033d4 <siprintf+0x38>)
 80033ae:	9107      	str	r1, [sp, #28]
 80033b0:	9104      	str	r1, [sp, #16]
 80033b2:	4909      	ldr	r1, [pc, #36]	; (80033d8 <siprintf+0x3c>)
 80033b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033b8:	9105      	str	r1, [sp, #20]
 80033ba:	6800      	ldr	r0, [r0, #0]
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	a902      	add	r1, sp, #8
 80033c0:	f000 f868 	bl	8003494 <_svfiprintf_r>
 80033c4:	9b02      	ldr	r3, [sp, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	b01c      	add	sp, #112	; 0x70
 80033cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80033d0:	b003      	add	sp, #12
 80033d2:	4770      	bx	lr
 80033d4:	2000000c 	.word	0x2000000c
 80033d8:	ffff0208 	.word	0xffff0208

080033dc <__ssputs_r>:
 80033dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e0:	688e      	ldr	r6, [r1, #8]
 80033e2:	429e      	cmp	r6, r3
 80033e4:	4682      	mov	sl, r0
 80033e6:	460c      	mov	r4, r1
 80033e8:	4690      	mov	r8, r2
 80033ea:	461f      	mov	r7, r3
 80033ec:	d838      	bhi.n	8003460 <__ssputs_r+0x84>
 80033ee:	898a      	ldrh	r2, [r1, #12]
 80033f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033f4:	d032      	beq.n	800345c <__ssputs_r+0x80>
 80033f6:	6825      	ldr	r5, [r4, #0]
 80033f8:	6909      	ldr	r1, [r1, #16]
 80033fa:	eba5 0901 	sub.w	r9, r5, r1
 80033fe:	6965      	ldr	r5, [r4, #20]
 8003400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003404:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003408:	3301      	adds	r3, #1
 800340a:	444b      	add	r3, r9
 800340c:	106d      	asrs	r5, r5, #1
 800340e:	429d      	cmp	r5, r3
 8003410:	bf38      	it	cc
 8003412:	461d      	movcc	r5, r3
 8003414:	0553      	lsls	r3, r2, #21
 8003416:	d531      	bpl.n	800347c <__ssputs_r+0xa0>
 8003418:	4629      	mov	r1, r5
 800341a:	f000 fb63 	bl	8003ae4 <_malloc_r>
 800341e:	4606      	mov	r6, r0
 8003420:	b950      	cbnz	r0, 8003438 <__ssputs_r+0x5c>
 8003422:	230c      	movs	r3, #12
 8003424:	f8ca 3000 	str.w	r3, [sl]
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342e:	81a3      	strh	r3, [r4, #12]
 8003430:	f04f 30ff 	mov.w	r0, #4294967295
 8003434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003438:	6921      	ldr	r1, [r4, #16]
 800343a:	464a      	mov	r2, r9
 800343c:	f000 fabe 	bl	80039bc <memcpy>
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344a:	81a3      	strh	r3, [r4, #12]
 800344c:	6126      	str	r6, [r4, #16]
 800344e:	6165      	str	r5, [r4, #20]
 8003450:	444e      	add	r6, r9
 8003452:	eba5 0509 	sub.w	r5, r5, r9
 8003456:	6026      	str	r6, [r4, #0]
 8003458:	60a5      	str	r5, [r4, #8]
 800345a:	463e      	mov	r6, r7
 800345c:	42be      	cmp	r6, r7
 800345e:	d900      	bls.n	8003462 <__ssputs_r+0x86>
 8003460:	463e      	mov	r6, r7
 8003462:	6820      	ldr	r0, [r4, #0]
 8003464:	4632      	mov	r2, r6
 8003466:	4641      	mov	r1, r8
 8003468:	f000 fab6 	bl	80039d8 <memmove>
 800346c:	68a3      	ldr	r3, [r4, #8]
 800346e:	1b9b      	subs	r3, r3, r6
 8003470:	60a3      	str	r3, [r4, #8]
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	4433      	add	r3, r6
 8003476:	6023      	str	r3, [r4, #0]
 8003478:	2000      	movs	r0, #0
 800347a:	e7db      	b.n	8003434 <__ssputs_r+0x58>
 800347c:	462a      	mov	r2, r5
 800347e:	f000 fba5 	bl	8003bcc <_realloc_r>
 8003482:	4606      	mov	r6, r0
 8003484:	2800      	cmp	r0, #0
 8003486:	d1e1      	bne.n	800344c <__ssputs_r+0x70>
 8003488:	6921      	ldr	r1, [r4, #16]
 800348a:	4650      	mov	r0, sl
 800348c:	f000 fabe 	bl	8003a0c <_free_r>
 8003490:	e7c7      	b.n	8003422 <__ssputs_r+0x46>
	...

08003494 <_svfiprintf_r>:
 8003494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003498:	4698      	mov	r8, r3
 800349a:	898b      	ldrh	r3, [r1, #12]
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	b09d      	sub	sp, #116	; 0x74
 80034a0:	4607      	mov	r7, r0
 80034a2:	460d      	mov	r5, r1
 80034a4:	4614      	mov	r4, r2
 80034a6:	d50e      	bpl.n	80034c6 <_svfiprintf_r+0x32>
 80034a8:	690b      	ldr	r3, [r1, #16]
 80034aa:	b963      	cbnz	r3, 80034c6 <_svfiprintf_r+0x32>
 80034ac:	2140      	movs	r1, #64	; 0x40
 80034ae:	f000 fb19 	bl	8003ae4 <_malloc_r>
 80034b2:	6028      	str	r0, [r5, #0]
 80034b4:	6128      	str	r0, [r5, #16]
 80034b6:	b920      	cbnz	r0, 80034c2 <_svfiprintf_r+0x2e>
 80034b8:	230c      	movs	r3, #12
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	e0d1      	b.n	8003666 <_svfiprintf_r+0x1d2>
 80034c2:	2340      	movs	r3, #64	; 0x40
 80034c4:	616b      	str	r3, [r5, #20]
 80034c6:	2300      	movs	r3, #0
 80034c8:	9309      	str	r3, [sp, #36]	; 0x24
 80034ca:	2320      	movs	r3, #32
 80034cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80034d4:	2330      	movs	r3, #48	; 0x30
 80034d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003680 <_svfiprintf_r+0x1ec>
 80034da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034de:	f04f 0901 	mov.w	r9, #1
 80034e2:	4623      	mov	r3, r4
 80034e4:	469a      	mov	sl, r3
 80034e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034ea:	b10a      	cbz	r2, 80034f0 <_svfiprintf_r+0x5c>
 80034ec:	2a25      	cmp	r2, #37	; 0x25
 80034ee:	d1f9      	bne.n	80034e4 <_svfiprintf_r+0x50>
 80034f0:	ebba 0b04 	subs.w	fp, sl, r4
 80034f4:	d00b      	beq.n	800350e <_svfiprintf_r+0x7a>
 80034f6:	465b      	mov	r3, fp
 80034f8:	4622      	mov	r2, r4
 80034fa:	4629      	mov	r1, r5
 80034fc:	4638      	mov	r0, r7
 80034fe:	f7ff ff6d 	bl	80033dc <__ssputs_r>
 8003502:	3001      	adds	r0, #1
 8003504:	f000 80aa 	beq.w	800365c <_svfiprintf_r+0x1c8>
 8003508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800350a:	445a      	add	r2, fp
 800350c:	9209      	str	r2, [sp, #36]	; 0x24
 800350e:	f89a 3000 	ldrb.w	r3, [sl]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 80a2 	beq.w	800365c <_svfiprintf_r+0x1c8>
 8003518:	2300      	movs	r3, #0
 800351a:	f04f 32ff 	mov.w	r2, #4294967295
 800351e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003522:	f10a 0a01 	add.w	sl, sl, #1
 8003526:	9304      	str	r3, [sp, #16]
 8003528:	9307      	str	r3, [sp, #28]
 800352a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800352e:	931a      	str	r3, [sp, #104]	; 0x68
 8003530:	4654      	mov	r4, sl
 8003532:	2205      	movs	r2, #5
 8003534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003538:	4851      	ldr	r0, [pc, #324]	; (8003680 <_svfiprintf_r+0x1ec>)
 800353a:	f7fc fe51 	bl	80001e0 <memchr>
 800353e:	9a04      	ldr	r2, [sp, #16]
 8003540:	b9d8      	cbnz	r0, 800357a <_svfiprintf_r+0xe6>
 8003542:	06d0      	lsls	r0, r2, #27
 8003544:	bf44      	itt	mi
 8003546:	2320      	movmi	r3, #32
 8003548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800354c:	0711      	lsls	r1, r2, #28
 800354e:	bf44      	itt	mi
 8003550:	232b      	movmi	r3, #43	; 0x2b
 8003552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003556:	f89a 3000 	ldrb.w	r3, [sl]
 800355a:	2b2a      	cmp	r3, #42	; 0x2a
 800355c:	d015      	beq.n	800358a <_svfiprintf_r+0xf6>
 800355e:	9a07      	ldr	r2, [sp, #28]
 8003560:	4654      	mov	r4, sl
 8003562:	2000      	movs	r0, #0
 8003564:	f04f 0c0a 	mov.w	ip, #10
 8003568:	4621      	mov	r1, r4
 800356a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800356e:	3b30      	subs	r3, #48	; 0x30
 8003570:	2b09      	cmp	r3, #9
 8003572:	d94e      	bls.n	8003612 <_svfiprintf_r+0x17e>
 8003574:	b1b0      	cbz	r0, 80035a4 <_svfiprintf_r+0x110>
 8003576:	9207      	str	r2, [sp, #28]
 8003578:	e014      	b.n	80035a4 <_svfiprintf_r+0x110>
 800357a:	eba0 0308 	sub.w	r3, r0, r8
 800357e:	fa09 f303 	lsl.w	r3, r9, r3
 8003582:	4313      	orrs	r3, r2
 8003584:	9304      	str	r3, [sp, #16]
 8003586:	46a2      	mov	sl, r4
 8003588:	e7d2      	b.n	8003530 <_svfiprintf_r+0x9c>
 800358a:	9b03      	ldr	r3, [sp, #12]
 800358c:	1d19      	adds	r1, r3, #4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	9103      	str	r1, [sp, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	bfbb      	ittet	lt
 8003596:	425b      	neglt	r3, r3
 8003598:	f042 0202 	orrlt.w	r2, r2, #2
 800359c:	9307      	strge	r3, [sp, #28]
 800359e:	9307      	strlt	r3, [sp, #28]
 80035a0:	bfb8      	it	lt
 80035a2:	9204      	strlt	r2, [sp, #16]
 80035a4:	7823      	ldrb	r3, [r4, #0]
 80035a6:	2b2e      	cmp	r3, #46	; 0x2e
 80035a8:	d10c      	bne.n	80035c4 <_svfiprintf_r+0x130>
 80035aa:	7863      	ldrb	r3, [r4, #1]
 80035ac:	2b2a      	cmp	r3, #42	; 0x2a
 80035ae:	d135      	bne.n	800361c <_svfiprintf_r+0x188>
 80035b0:	9b03      	ldr	r3, [sp, #12]
 80035b2:	1d1a      	adds	r2, r3, #4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	9203      	str	r2, [sp, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bfb8      	it	lt
 80035bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80035c0:	3402      	adds	r4, #2
 80035c2:	9305      	str	r3, [sp, #20]
 80035c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003690 <_svfiprintf_r+0x1fc>
 80035c8:	7821      	ldrb	r1, [r4, #0]
 80035ca:	2203      	movs	r2, #3
 80035cc:	4650      	mov	r0, sl
 80035ce:	f7fc fe07 	bl	80001e0 <memchr>
 80035d2:	b140      	cbz	r0, 80035e6 <_svfiprintf_r+0x152>
 80035d4:	2340      	movs	r3, #64	; 0x40
 80035d6:	eba0 000a 	sub.w	r0, r0, sl
 80035da:	fa03 f000 	lsl.w	r0, r3, r0
 80035de:	9b04      	ldr	r3, [sp, #16]
 80035e0:	4303      	orrs	r3, r0
 80035e2:	3401      	adds	r4, #1
 80035e4:	9304      	str	r3, [sp, #16]
 80035e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035ea:	4826      	ldr	r0, [pc, #152]	; (8003684 <_svfiprintf_r+0x1f0>)
 80035ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035f0:	2206      	movs	r2, #6
 80035f2:	f7fc fdf5 	bl	80001e0 <memchr>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d038      	beq.n	800366c <_svfiprintf_r+0x1d8>
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <_svfiprintf_r+0x1f4>)
 80035fc:	bb1b      	cbnz	r3, 8003646 <_svfiprintf_r+0x1b2>
 80035fe:	9b03      	ldr	r3, [sp, #12]
 8003600:	3307      	adds	r3, #7
 8003602:	f023 0307 	bic.w	r3, r3, #7
 8003606:	3308      	adds	r3, #8
 8003608:	9303      	str	r3, [sp, #12]
 800360a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800360c:	4433      	add	r3, r6
 800360e:	9309      	str	r3, [sp, #36]	; 0x24
 8003610:	e767      	b.n	80034e2 <_svfiprintf_r+0x4e>
 8003612:	fb0c 3202 	mla	r2, ip, r2, r3
 8003616:	460c      	mov	r4, r1
 8003618:	2001      	movs	r0, #1
 800361a:	e7a5      	b.n	8003568 <_svfiprintf_r+0xd4>
 800361c:	2300      	movs	r3, #0
 800361e:	3401      	adds	r4, #1
 8003620:	9305      	str	r3, [sp, #20]
 8003622:	4619      	mov	r1, r3
 8003624:	f04f 0c0a 	mov.w	ip, #10
 8003628:	4620      	mov	r0, r4
 800362a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800362e:	3a30      	subs	r2, #48	; 0x30
 8003630:	2a09      	cmp	r2, #9
 8003632:	d903      	bls.n	800363c <_svfiprintf_r+0x1a8>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0c5      	beq.n	80035c4 <_svfiprintf_r+0x130>
 8003638:	9105      	str	r1, [sp, #20]
 800363a:	e7c3      	b.n	80035c4 <_svfiprintf_r+0x130>
 800363c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003640:	4604      	mov	r4, r0
 8003642:	2301      	movs	r3, #1
 8003644:	e7f0      	b.n	8003628 <_svfiprintf_r+0x194>
 8003646:	ab03      	add	r3, sp, #12
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	462a      	mov	r2, r5
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <_svfiprintf_r+0x1f8>)
 800364e:	a904      	add	r1, sp, #16
 8003650:	4638      	mov	r0, r7
 8003652:	f3af 8000 	nop.w
 8003656:	1c42      	adds	r2, r0, #1
 8003658:	4606      	mov	r6, r0
 800365a:	d1d6      	bne.n	800360a <_svfiprintf_r+0x176>
 800365c:	89ab      	ldrh	r3, [r5, #12]
 800365e:	065b      	lsls	r3, r3, #25
 8003660:	f53f af2c 	bmi.w	80034bc <_svfiprintf_r+0x28>
 8003664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003666:	b01d      	add	sp, #116	; 0x74
 8003668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366c:	ab03      	add	r3, sp, #12
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	462a      	mov	r2, r5
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <_svfiprintf_r+0x1f8>)
 8003674:	a904      	add	r1, sp, #16
 8003676:	4638      	mov	r0, r7
 8003678:	f000 f87a 	bl	8003770 <_printf_i>
 800367c:	e7eb      	b.n	8003656 <_svfiprintf_r+0x1c2>
 800367e:	bf00      	nop
 8003680:	08003cc4 	.word	0x08003cc4
 8003684:	08003cce 	.word	0x08003cce
 8003688:	00000000 	.word	0x00000000
 800368c:	080033dd 	.word	0x080033dd
 8003690:	08003cca 	.word	0x08003cca

08003694 <_printf_common>:
 8003694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003698:	4616      	mov	r6, r2
 800369a:	4699      	mov	r9, r3
 800369c:	688a      	ldr	r2, [r1, #8]
 800369e:	690b      	ldr	r3, [r1, #16]
 80036a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a4:	4293      	cmp	r3, r2
 80036a6:	bfb8      	it	lt
 80036a8:	4613      	movlt	r3, r2
 80036aa:	6033      	str	r3, [r6, #0]
 80036ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036b0:	4607      	mov	r7, r0
 80036b2:	460c      	mov	r4, r1
 80036b4:	b10a      	cbz	r2, 80036ba <_printf_common+0x26>
 80036b6:	3301      	adds	r3, #1
 80036b8:	6033      	str	r3, [r6, #0]
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	0699      	lsls	r1, r3, #26
 80036be:	bf42      	ittt	mi
 80036c0:	6833      	ldrmi	r3, [r6, #0]
 80036c2:	3302      	addmi	r3, #2
 80036c4:	6033      	strmi	r3, [r6, #0]
 80036c6:	6825      	ldr	r5, [r4, #0]
 80036c8:	f015 0506 	ands.w	r5, r5, #6
 80036cc:	d106      	bne.n	80036dc <_printf_common+0x48>
 80036ce:	f104 0a19 	add.w	sl, r4, #25
 80036d2:	68e3      	ldr	r3, [r4, #12]
 80036d4:	6832      	ldr	r2, [r6, #0]
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	42ab      	cmp	r3, r5
 80036da:	dc26      	bgt.n	800372a <_printf_common+0x96>
 80036dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036e0:	1e13      	subs	r3, r2, #0
 80036e2:	6822      	ldr	r2, [r4, #0]
 80036e4:	bf18      	it	ne
 80036e6:	2301      	movne	r3, #1
 80036e8:	0692      	lsls	r2, r2, #26
 80036ea:	d42b      	bmi.n	8003744 <_printf_common+0xb0>
 80036ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036f0:	4649      	mov	r1, r9
 80036f2:	4638      	mov	r0, r7
 80036f4:	47c0      	blx	r8
 80036f6:	3001      	adds	r0, #1
 80036f8:	d01e      	beq.n	8003738 <_printf_common+0xa4>
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	68e5      	ldr	r5, [r4, #12]
 80036fe:	6832      	ldr	r2, [r6, #0]
 8003700:	f003 0306 	and.w	r3, r3, #6
 8003704:	2b04      	cmp	r3, #4
 8003706:	bf08      	it	eq
 8003708:	1aad      	subeq	r5, r5, r2
 800370a:	68a3      	ldr	r3, [r4, #8]
 800370c:	6922      	ldr	r2, [r4, #16]
 800370e:	bf0c      	ite	eq
 8003710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003714:	2500      	movne	r5, #0
 8003716:	4293      	cmp	r3, r2
 8003718:	bfc4      	itt	gt
 800371a:	1a9b      	subgt	r3, r3, r2
 800371c:	18ed      	addgt	r5, r5, r3
 800371e:	2600      	movs	r6, #0
 8003720:	341a      	adds	r4, #26
 8003722:	42b5      	cmp	r5, r6
 8003724:	d11a      	bne.n	800375c <_printf_common+0xc8>
 8003726:	2000      	movs	r0, #0
 8003728:	e008      	b.n	800373c <_printf_common+0xa8>
 800372a:	2301      	movs	r3, #1
 800372c:	4652      	mov	r2, sl
 800372e:	4649      	mov	r1, r9
 8003730:	4638      	mov	r0, r7
 8003732:	47c0      	blx	r8
 8003734:	3001      	adds	r0, #1
 8003736:	d103      	bne.n	8003740 <_printf_common+0xac>
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003740:	3501      	adds	r5, #1
 8003742:	e7c6      	b.n	80036d2 <_printf_common+0x3e>
 8003744:	18e1      	adds	r1, r4, r3
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	2030      	movs	r0, #48	; 0x30
 800374a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800374e:	4422      	add	r2, r4
 8003750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003758:	3302      	adds	r3, #2
 800375a:	e7c7      	b.n	80036ec <_printf_common+0x58>
 800375c:	2301      	movs	r3, #1
 800375e:	4622      	mov	r2, r4
 8003760:	4649      	mov	r1, r9
 8003762:	4638      	mov	r0, r7
 8003764:	47c0      	blx	r8
 8003766:	3001      	adds	r0, #1
 8003768:	d0e6      	beq.n	8003738 <_printf_common+0xa4>
 800376a:	3601      	adds	r6, #1
 800376c:	e7d9      	b.n	8003722 <_printf_common+0x8e>
	...

08003770 <_printf_i>:
 8003770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003774:	7e0f      	ldrb	r7, [r1, #24]
 8003776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003778:	2f78      	cmp	r7, #120	; 0x78
 800377a:	4691      	mov	r9, r2
 800377c:	4680      	mov	r8, r0
 800377e:	460c      	mov	r4, r1
 8003780:	469a      	mov	sl, r3
 8003782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003786:	d807      	bhi.n	8003798 <_printf_i+0x28>
 8003788:	2f62      	cmp	r7, #98	; 0x62
 800378a:	d80a      	bhi.n	80037a2 <_printf_i+0x32>
 800378c:	2f00      	cmp	r7, #0
 800378e:	f000 80d8 	beq.w	8003942 <_printf_i+0x1d2>
 8003792:	2f58      	cmp	r7, #88	; 0x58
 8003794:	f000 80a3 	beq.w	80038de <_printf_i+0x16e>
 8003798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800379c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037a0:	e03a      	b.n	8003818 <_printf_i+0xa8>
 80037a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037a6:	2b15      	cmp	r3, #21
 80037a8:	d8f6      	bhi.n	8003798 <_printf_i+0x28>
 80037aa:	a101      	add	r1, pc, #4	; (adr r1, 80037b0 <_printf_i+0x40>)
 80037ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037b0:	08003809 	.word	0x08003809
 80037b4:	0800381d 	.word	0x0800381d
 80037b8:	08003799 	.word	0x08003799
 80037bc:	08003799 	.word	0x08003799
 80037c0:	08003799 	.word	0x08003799
 80037c4:	08003799 	.word	0x08003799
 80037c8:	0800381d 	.word	0x0800381d
 80037cc:	08003799 	.word	0x08003799
 80037d0:	08003799 	.word	0x08003799
 80037d4:	08003799 	.word	0x08003799
 80037d8:	08003799 	.word	0x08003799
 80037dc:	08003929 	.word	0x08003929
 80037e0:	0800384d 	.word	0x0800384d
 80037e4:	0800390b 	.word	0x0800390b
 80037e8:	08003799 	.word	0x08003799
 80037ec:	08003799 	.word	0x08003799
 80037f0:	0800394b 	.word	0x0800394b
 80037f4:	08003799 	.word	0x08003799
 80037f8:	0800384d 	.word	0x0800384d
 80037fc:	08003799 	.word	0x08003799
 8003800:	08003799 	.word	0x08003799
 8003804:	08003913 	.word	0x08003913
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	1d1a      	adds	r2, r3, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	602a      	str	r2, [r5, #0]
 8003810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003818:	2301      	movs	r3, #1
 800381a:	e0a3      	b.n	8003964 <_printf_i+0x1f4>
 800381c:	6820      	ldr	r0, [r4, #0]
 800381e:	6829      	ldr	r1, [r5, #0]
 8003820:	0606      	lsls	r6, r0, #24
 8003822:	f101 0304 	add.w	r3, r1, #4
 8003826:	d50a      	bpl.n	800383e <_printf_i+0xce>
 8003828:	680e      	ldr	r6, [r1, #0]
 800382a:	602b      	str	r3, [r5, #0]
 800382c:	2e00      	cmp	r6, #0
 800382e:	da03      	bge.n	8003838 <_printf_i+0xc8>
 8003830:	232d      	movs	r3, #45	; 0x2d
 8003832:	4276      	negs	r6, r6
 8003834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003838:	485e      	ldr	r0, [pc, #376]	; (80039b4 <_printf_i+0x244>)
 800383a:	230a      	movs	r3, #10
 800383c:	e019      	b.n	8003872 <_printf_i+0x102>
 800383e:	680e      	ldr	r6, [r1, #0]
 8003840:	602b      	str	r3, [r5, #0]
 8003842:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003846:	bf18      	it	ne
 8003848:	b236      	sxthne	r6, r6
 800384a:	e7ef      	b.n	800382c <_printf_i+0xbc>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	6820      	ldr	r0, [r4, #0]
 8003850:	1d19      	adds	r1, r3, #4
 8003852:	6029      	str	r1, [r5, #0]
 8003854:	0601      	lsls	r1, r0, #24
 8003856:	d501      	bpl.n	800385c <_printf_i+0xec>
 8003858:	681e      	ldr	r6, [r3, #0]
 800385a:	e002      	b.n	8003862 <_printf_i+0xf2>
 800385c:	0646      	lsls	r6, r0, #25
 800385e:	d5fb      	bpl.n	8003858 <_printf_i+0xe8>
 8003860:	881e      	ldrh	r6, [r3, #0]
 8003862:	4854      	ldr	r0, [pc, #336]	; (80039b4 <_printf_i+0x244>)
 8003864:	2f6f      	cmp	r7, #111	; 0x6f
 8003866:	bf0c      	ite	eq
 8003868:	2308      	moveq	r3, #8
 800386a:	230a      	movne	r3, #10
 800386c:	2100      	movs	r1, #0
 800386e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003872:	6865      	ldr	r5, [r4, #4]
 8003874:	60a5      	str	r5, [r4, #8]
 8003876:	2d00      	cmp	r5, #0
 8003878:	bfa2      	ittt	ge
 800387a:	6821      	ldrge	r1, [r4, #0]
 800387c:	f021 0104 	bicge.w	r1, r1, #4
 8003880:	6021      	strge	r1, [r4, #0]
 8003882:	b90e      	cbnz	r6, 8003888 <_printf_i+0x118>
 8003884:	2d00      	cmp	r5, #0
 8003886:	d04d      	beq.n	8003924 <_printf_i+0x1b4>
 8003888:	4615      	mov	r5, r2
 800388a:	fbb6 f1f3 	udiv	r1, r6, r3
 800388e:	fb03 6711 	mls	r7, r3, r1, r6
 8003892:	5dc7      	ldrb	r7, [r0, r7]
 8003894:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003898:	4637      	mov	r7, r6
 800389a:	42bb      	cmp	r3, r7
 800389c:	460e      	mov	r6, r1
 800389e:	d9f4      	bls.n	800388a <_printf_i+0x11a>
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d10b      	bne.n	80038bc <_printf_i+0x14c>
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	07de      	lsls	r6, r3, #31
 80038a8:	d508      	bpl.n	80038bc <_printf_i+0x14c>
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	6861      	ldr	r1, [r4, #4]
 80038ae:	4299      	cmp	r1, r3
 80038b0:	bfde      	ittt	le
 80038b2:	2330      	movle	r3, #48	; 0x30
 80038b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038bc:	1b52      	subs	r2, r2, r5
 80038be:	6122      	str	r2, [r4, #16]
 80038c0:	f8cd a000 	str.w	sl, [sp]
 80038c4:	464b      	mov	r3, r9
 80038c6:	aa03      	add	r2, sp, #12
 80038c8:	4621      	mov	r1, r4
 80038ca:	4640      	mov	r0, r8
 80038cc:	f7ff fee2 	bl	8003694 <_printf_common>
 80038d0:	3001      	adds	r0, #1
 80038d2:	d14c      	bne.n	800396e <_printf_i+0x1fe>
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	b004      	add	sp, #16
 80038da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038de:	4835      	ldr	r0, [pc, #212]	; (80039b4 <_printf_i+0x244>)
 80038e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038e4:	6829      	ldr	r1, [r5, #0]
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80038ec:	6029      	str	r1, [r5, #0]
 80038ee:	061d      	lsls	r5, r3, #24
 80038f0:	d514      	bpl.n	800391c <_printf_i+0x1ac>
 80038f2:	07df      	lsls	r7, r3, #31
 80038f4:	bf44      	itt	mi
 80038f6:	f043 0320 	orrmi.w	r3, r3, #32
 80038fa:	6023      	strmi	r3, [r4, #0]
 80038fc:	b91e      	cbnz	r6, 8003906 <_printf_i+0x196>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	f023 0320 	bic.w	r3, r3, #32
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	2310      	movs	r3, #16
 8003908:	e7b0      	b.n	800386c <_printf_i+0xfc>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	f043 0320 	orr.w	r3, r3, #32
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	2378      	movs	r3, #120	; 0x78
 8003914:	4828      	ldr	r0, [pc, #160]	; (80039b8 <_printf_i+0x248>)
 8003916:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800391a:	e7e3      	b.n	80038e4 <_printf_i+0x174>
 800391c:	0659      	lsls	r1, r3, #25
 800391e:	bf48      	it	mi
 8003920:	b2b6      	uxthmi	r6, r6
 8003922:	e7e6      	b.n	80038f2 <_printf_i+0x182>
 8003924:	4615      	mov	r5, r2
 8003926:	e7bb      	b.n	80038a0 <_printf_i+0x130>
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	6826      	ldr	r6, [r4, #0]
 800392c:	6961      	ldr	r1, [r4, #20]
 800392e:	1d18      	adds	r0, r3, #4
 8003930:	6028      	str	r0, [r5, #0]
 8003932:	0635      	lsls	r5, r6, #24
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	d501      	bpl.n	800393c <_printf_i+0x1cc>
 8003938:	6019      	str	r1, [r3, #0]
 800393a:	e002      	b.n	8003942 <_printf_i+0x1d2>
 800393c:	0670      	lsls	r0, r6, #25
 800393e:	d5fb      	bpl.n	8003938 <_printf_i+0x1c8>
 8003940:	8019      	strh	r1, [r3, #0]
 8003942:	2300      	movs	r3, #0
 8003944:	6123      	str	r3, [r4, #16]
 8003946:	4615      	mov	r5, r2
 8003948:	e7ba      	b.n	80038c0 <_printf_i+0x150>
 800394a:	682b      	ldr	r3, [r5, #0]
 800394c:	1d1a      	adds	r2, r3, #4
 800394e:	602a      	str	r2, [r5, #0]
 8003950:	681d      	ldr	r5, [r3, #0]
 8003952:	6862      	ldr	r2, [r4, #4]
 8003954:	2100      	movs	r1, #0
 8003956:	4628      	mov	r0, r5
 8003958:	f7fc fc42 	bl	80001e0 <memchr>
 800395c:	b108      	cbz	r0, 8003962 <_printf_i+0x1f2>
 800395e:	1b40      	subs	r0, r0, r5
 8003960:	6060      	str	r0, [r4, #4]
 8003962:	6863      	ldr	r3, [r4, #4]
 8003964:	6123      	str	r3, [r4, #16]
 8003966:	2300      	movs	r3, #0
 8003968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800396c:	e7a8      	b.n	80038c0 <_printf_i+0x150>
 800396e:	6923      	ldr	r3, [r4, #16]
 8003970:	462a      	mov	r2, r5
 8003972:	4649      	mov	r1, r9
 8003974:	4640      	mov	r0, r8
 8003976:	47d0      	blx	sl
 8003978:	3001      	adds	r0, #1
 800397a:	d0ab      	beq.n	80038d4 <_printf_i+0x164>
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	079b      	lsls	r3, r3, #30
 8003980:	d413      	bmi.n	80039aa <_printf_i+0x23a>
 8003982:	68e0      	ldr	r0, [r4, #12]
 8003984:	9b03      	ldr	r3, [sp, #12]
 8003986:	4298      	cmp	r0, r3
 8003988:	bfb8      	it	lt
 800398a:	4618      	movlt	r0, r3
 800398c:	e7a4      	b.n	80038d8 <_printf_i+0x168>
 800398e:	2301      	movs	r3, #1
 8003990:	4632      	mov	r2, r6
 8003992:	4649      	mov	r1, r9
 8003994:	4640      	mov	r0, r8
 8003996:	47d0      	blx	sl
 8003998:	3001      	adds	r0, #1
 800399a:	d09b      	beq.n	80038d4 <_printf_i+0x164>
 800399c:	3501      	adds	r5, #1
 800399e:	68e3      	ldr	r3, [r4, #12]
 80039a0:	9903      	ldr	r1, [sp, #12]
 80039a2:	1a5b      	subs	r3, r3, r1
 80039a4:	42ab      	cmp	r3, r5
 80039a6:	dcf2      	bgt.n	800398e <_printf_i+0x21e>
 80039a8:	e7eb      	b.n	8003982 <_printf_i+0x212>
 80039aa:	2500      	movs	r5, #0
 80039ac:	f104 0619 	add.w	r6, r4, #25
 80039b0:	e7f5      	b.n	800399e <_printf_i+0x22e>
 80039b2:	bf00      	nop
 80039b4:	08003cd5 	.word	0x08003cd5
 80039b8:	08003ce6 	.word	0x08003ce6

080039bc <memcpy>:
 80039bc:	440a      	add	r2, r1
 80039be:	4291      	cmp	r1, r2
 80039c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80039c4:	d100      	bne.n	80039c8 <memcpy+0xc>
 80039c6:	4770      	bx	lr
 80039c8:	b510      	push	{r4, lr}
 80039ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039d2:	4291      	cmp	r1, r2
 80039d4:	d1f9      	bne.n	80039ca <memcpy+0xe>
 80039d6:	bd10      	pop	{r4, pc}

080039d8 <memmove>:
 80039d8:	4288      	cmp	r0, r1
 80039da:	b510      	push	{r4, lr}
 80039dc:	eb01 0402 	add.w	r4, r1, r2
 80039e0:	d902      	bls.n	80039e8 <memmove+0x10>
 80039e2:	4284      	cmp	r4, r0
 80039e4:	4623      	mov	r3, r4
 80039e6:	d807      	bhi.n	80039f8 <memmove+0x20>
 80039e8:	1e43      	subs	r3, r0, #1
 80039ea:	42a1      	cmp	r1, r4
 80039ec:	d008      	beq.n	8003a00 <memmove+0x28>
 80039ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039f6:	e7f8      	b.n	80039ea <memmove+0x12>
 80039f8:	4402      	add	r2, r0
 80039fa:	4601      	mov	r1, r0
 80039fc:	428a      	cmp	r2, r1
 80039fe:	d100      	bne.n	8003a02 <memmove+0x2a>
 8003a00:	bd10      	pop	{r4, pc}
 8003a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a0a:	e7f7      	b.n	80039fc <memmove+0x24>

08003a0c <_free_r>:
 8003a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a0e:	2900      	cmp	r1, #0
 8003a10:	d044      	beq.n	8003a9c <_free_r+0x90>
 8003a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a16:	9001      	str	r0, [sp, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f1a1 0404 	sub.w	r4, r1, #4
 8003a1e:	bfb8      	it	lt
 8003a20:	18e4      	addlt	r4, r4, r3
 8003a22:	f000 f913 	bl	8003c4c <__malloc_lock>
 8003a26:	4a1e      	ldr	r2, [pc, #120]	; (8003aa0 <_free_r+0x94>)
 8003a28:	9801      	ldr	r0, [sp, #4]
 8003a2a:	6813      	ldr	r3, [r2, #0]
 8003a2c:	b933      	cbnz	r3, 8003a3c <_free_r+0x30>
 8003a2e:	6063      	str	r3, [r4, #4]
 8003a30:	6014      	str	r4, [r2, #0]
 8003a32:	b003      	add	sp, #12
 8003a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a38:	f000 b90e 	b.w	8003c58 <__malloc_unlock>
 8003a3c:	42a3      	cmp	r3, r4
 8003a3e:	d908      	bls.n	8003a52 <_free_r+0x46>
 8003a40:	6825      	ldr	r5, [r4, #0]
 8003a42:	1961      	adds	r1, r4, r5
 8003a44:	428b      	cmp	r3, r1
 8003a46:	bf01      	itttt	eq
 8003a48:	6819      	ldreq	r1, [r3, #0]
 8003a4a:	685b      	ldreq	r3, [r3, #4]
 8003a4c:	1949      	addeq	r1, r1, r5
 8003a4e:	6021      	streq	r1, [r4, #0]
 8003a50:	e7ed      	b.n	8003a2e <_free_r+0x22>
 8003a52:	461a      	mov	r2, r3
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	b10b      	cbz	r3, 8003a5c <_free_r+0x50>
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	d9fa      	bls.n	8003a52 <_free_r+0x46>
 8003a5c:	6811      	ldr	r1, [r2, #0]
 8003a5e:	1855      	adds	r5, r2, r1
 8003a60:	42a5      	cmp	r5, r4
 8003a62:	d10b      	bne.n	8003a7c <_free_r+0x70>
 8003a64:	6824      	ldr	r4, [r4, #0]
 8003a66:	4421      	add	r1, r4
 8003a68:	1854      	adds	r4, r2, r1
 8003a6a:	42a3      	cmp	r3, r4
 8003a6c:	6011      	str	r1, [r2, #0]
 8003a6e:	d1e0      	bne.n	8003a32 <_free_r+0x26>
 8003a70:	681c      	ldr	r4, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	6053      	str	r3, [r2, #4]
 8003a76:	4421      	add	r1, r4
 8003a78:	6011      	str	r1, [r2, #0]
 8003a7a:	e7da      	b.n	8003a32 <_free_r+0x26>
 8003a7c:	d902      	bls.n	8003a84 <_free_r+0x78>
 8003a7e:	230c      	movs	r3, #12
 8003a80:	6003      	str	r3, [r0, #0]
 8003a82:	e7d6      	b.n	8003a32 <_free_r+0x26>
 8003a84:	6825      	ldr	r5, [r4, #0]
 8003a86:	1961      	adds	r1, r4, r5
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	bf04      	itt	eq
 8003a8c:	6819      	ldreq	r1, [r3, #0]
 8003a8e:	685b      	ldreq	r3, [r3, #4]
 8003a90:	6063      	str	r3, [r4, #4]
 8003a92:	bf04      	itt	eq
 8003a94:	1949      	addeq	r1, r1, r5
 8003a96:	6021      	streq	r1, [r4, #0]
 8003a98:	6054      	str	r4, [r2, #4]
 8003a9a:	e7ca      	b.n	8003a32 <_free_r+0x26>
 8003a9c:	b003      	add	sp, #12
 8003a9e:	bd30      	pop	{r4, r5, pc}
 8003aa0:	200001cc 	.word	0x200001cc

08003aa4 <sbrk_aligned>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	4e0e      	ldr	r6, [pc, #56]	; (8003ae0 <sbrk_aligned+0x3c>)
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	6831      	ldr	r1, [r6, #0]
 8003aac:	4605      	mov	r5, r0
 8003aae:	b911      	cbnz	r1, 8003ab6 <sbrk_aligned+0x12>
 8003ab0:	f000 f8bc 	bl	8003c2c <_sbrk_r>
 8003ab4:	6030      	str	r0, [r6, #0]
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	4628      	mov	r0, r5
 8003aba:	f000 f8b7 	bl	8003c2c <_sbrk_r>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	d00a      	beq.n	8003ad8 <sbrk_aligned+0x34>
 8003ac2:	1cc4      	adds	r4, r0, #3
 8003ac4:	f024 0403 	bic.w	r4, r4, #3
 8003ac8:	42a0      	cmp	r0, r4
 8003aca:	d007      	beq.n	8003adc <sbrk_aligned+0x38>
 8003acc:	1a21      	subs	r1, r4, r0
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f000 f8ac 	bl	8003c2c <_sbrk_r>
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d101      	bne.n	8003adc <sbrk_aligned+0x38>
 8003ad8:	f04f 34ff 	mov.w	r4, #4294967295
 8003adc:	4620      	mov	r0, r4
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	200001d0 	.word	0x200001d0

08003ae4 <_malloc_r>:
 8003ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae8:	1ccd      	adds	r5, r1, #3
 8003aea:	f025 0503 	bic.w	r5, r5, #3
 8003aee:	3508      	adds	r5, #8
 8003af0:	2d0c      	cmp	r5, #12
 8003af2:	bf38      	it	cc
 8003af4:	250c      	movcc	r5, #12
 8003af6:	2d00      	cmp	r5, #0
 8003af8:	4607      	mov	r7, r0
 8003afa:	db01      	blt.n	8003b00 <_malloc_r+0x1c>
 8003afc:	42a9      	cmp	r1, r5
 8003afe:	d905      	bls.n	8003b0c <_malloc_r+0x28>
 8003b00:	230c      	movs	r3, #12
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	2600      	movs	r6, #0
 8003b06:	4630      	mov	r0, r6
 8003b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b0c:	4e2e      	ldr	r6, [pc, #184]	; (8003bc8 <_malloc_r+0xe4>)
 8003b0e:	f000 f89d 	bl	8003c4c <__malloc_lock>
 8003b12:	6833      	ldr	r3, [r6, #0]
 8003b14:	461c      	mov	r4, r3
 8003b16:	bb34      	cbnz	r4, 8003b66 <_malloc_r+0x82>
 8003b18:	4629      	mov	r1, r5
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	f7ff ffc2 	bl	8003aa4 <sbrk_aligned>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	4604      	mov	r4, r0
 8003b24:	d14d      	bne.n	8003bc2 <_malloc_r+0xde>
 8003b26:	6834      	ldr	r4, [r6, #0]
 8003b28:	4626      	mov	r6, r4
 8003b2a:	2e00      	cmp	r6, #0
 8003b2c:	d140      	bne.n	8003bb0 <_malloc_r+0xcc>
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	4631      	mov	r1, r6
 8003b32:	4638      	mov	r0, r7
 8003b34:	eb04 0803 	add.w	r8, r4, r3
 8003b38:	f000 f878 	bl	8003c2c <_sbrk_r>
 8003b3c:	4580      	cmp	r8, r0
 8003b3e:	d13a      	bne.n	8003bb6 <_malloc_r+0xd2>
 8003b40:	6821      	ldr	r1, [r4, #0]
 8003b42:	3503      	adds	r5, #3
 8003b44:	1a6d      	subs	r5, r5, r1
 8003b46:	f025 0503 	bic.w	r5, r5, #3
 8003b4a:	3508      	adds	r5, #8
 8003b4c:	2d0c      	cmp	r5, #12
 8003b4e:	bf38      	it	cc
 8003b50:	250c      	movcc	r5, #12
 8003b52:	4629      	mov	r1, r5
 8003b54:	4638      	mov	r0, r7
 8003b56:	f7ff ffa5 	bl	8003aa4 <sbrk_aligned>
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d02b      	beq.n	8003bb6 <_malloc_r+0xd2>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	442b      	add	r3, r5
 8003b62:	6023      	str	r3, [r4, #0]
 8003b64:	e00e      	b.n	8003b84 <_malloc_r+0xa0>
 8003b66:	6822      	ldr	r2, [r4, #0]
 8003b68:	1b52      	subs	r2, r2, r5
 8003b6a:	d41e      	bmi.n	8003baa <_malloc_r+0xc6>
 8003b6c:	2a0b      	cmp	r2, #11
 8003b6e:	d916      	bls.n	8003b9e <_malloc_r+0xba>
 8003b70:	1961      	adds	r1, r4, r5
 8003b72:	42a3      	cmp	r3, r4
 8003b74:	6025      	str	r5, [r4, #0]
 8003b76:	bf18      	it	ne
 8003b78:	6059      	strne	r1, [r3, #4]
 8003b7a:	6863      	ldr	r3, [r4, #4]
 8003b7c:	bf08      	it	eq
 8003b7e:	6031      	streq	r1, [r6, #0]
 8003b80:	5162      	str	r2, [r4, r5]
 8003b82:	604b      	str	r3, [r1, #4]
 8003b84:	4638      	mov	r0, r7
 8003b86:	f104 060b 	add.w	r6, r4, #11
 8003b8a:	f000 f865 	bl	8003c58 <__malloc_unlock>
 8003b8e:	f026 0607 	bic.w	r6, r6, #7
 8003b92:	1d23      	adds	r3, r4, #4
 8003b94:	1af2      	subs	r2, r6, r3
 8003b96:	d0b6      	beq.n	8003b06 <_malloc_r+0x22>
 8003b98:	1b9b      	subs	r3, r3, r6
 8003b9a:	50a3      	str	r3, [r4, r2]
 8003b9c:	e7b3      	b.n	8003b06 <_malloc_r+0x22>
 8003b9e:	6862      	ldr	r2, [r4, #4]
 8003ba0:	42a3      	cmp	r3, r4
 8003ba2:	bf0c      	ite	eq
 8003ba4:	6032      	streq	r2, [r6, #0]
 8003ba6:	605a      	strne	r2, [r3, #4]
 8003ba8:	e7ec      	b.n	8003b84 <_malloc_r+0xa0>
 8003baa:	4623      	mov	r3, r4
 8003bac:	6864      	ldr	r4, [r4, #4]
 8003bae:	e7b2      	b.n	8003b16 <_malloc_r+0x32>
 8003bb0:	4634      	mov	r4, r6
 8003bb2:	6876      	ldr	r6, [r6, #4]
 8003bb4:	e7b9      	b.n	8003b2a <_malloc_r+0x46>
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	4638      	mov	r0, r7
 8003bbc:	f000 f84c 	bl	8003c58 <__malloc_unlock>
 8003bc0:	e7a1      	b.n	8003b06 <_malloc_r+0x22>
 8003bc2:	6025      	str	r5, [r4, #0]
 8003bc4:	e7de      	b.n	8003b84 <_malloc_r+0xa0>
 8003bc6:	bf00      	nop
 8003bc8:	200001cc 	.word	0x200001cc

08003bcc <_realloc_r>:
 8003bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd0:	4680      	mov	r8, r0
 8003bd2:	4614      	mov	r4, r2
 8003bd4:	460e      	mov	r6, r1
 8003bd6:	b921      	cbnz	r1, 8003be2 <_realloc_r+0x16>
 8003bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bdc:	4611      	mov	r1, r2
 8003bde:	f7ff bf81 	b.w	8003ae4 <_malloc_r>
 8003be2:	b92a      	cbnz	r2, 8003bf0 <_realloc_r+0x24>
 8003be4:	f7ff ff12 	bl	8003a0c <_free_r>
 8003be8:	4625      	mov	r5, r4
 8003bea:	4628      	mov	r0, r5
 8003bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bf0:	f000 f838 	bl	8003c64 <_malloc_usable_size_r>
 8003bf4:	4284      	cmp	r4, r0
 8003bf6:	4607      	mov	r7, r0
 8003bf8:	d802      	bhi.n	8003c00 <_realloc_r+0x34>
 8003bfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bfe:	d812      	bhi.n	8003c26 <_realloc_r+0x5a>
 8003c00:	4621      	mov	r1, r4
 8003c02:	4640      	mov	r0, r8
 8003c04:	f7ff ff6e 	bl	8003ae4 <_malloc_r>
 8003c08:	4605      	mov	r5, r0
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d0ed      	beq.n	8003bea <_realloc_r+0x1e>
 8003c0e:	42bc      	cmp	r4, r7
 8003c10:	4622      	mov	r2, r4
 8003c12:	4631      	mov	r1, r6
 8003c14:	bf28      	it	cs
 8003c16:	463a      	movcs	r2, r7
 8003c18:	f7ff fed0 	bl	80039bc <memcpy>
 8003c1c:	4631      	mov	r1, r6
 8003c1e:	4640      	mov	r0, r8
 8003c20:	f7ff fef4 	bl	8003a0c <_free_r>
 8003c24:	e7e1      	b.n	8003bea <_realloc_r+0x1e>
 8003c26:	4635      	mov	r5, r6
 8003c28:	e7df      	b.n	8003bea <_realloc_r+0x1e>
	...

08003c2c <_sbrk_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	4d06      	ldr	r5, [pc, #24]	; (8003c48 <_sbrk_r+0x1c>)
 8003c30:	2300      	movs	r3, #0
 8003c32:	4604      	mov	r4, r0
 8003c34:	4608      	mov	r0, r1
 8003c36:	602b      	str	r3, [r5, #0]
 8003c38:	f7fc ff6e 	bl	8000b18 <_sbrk>
 8003c3c:	1c43      	adds	r3, r0, #1
 8003c3e:	d102      	bne.n	8003c46 <_sbrk_r+0x1a>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	b103      	cbz	r3, 8003c46 <_sbrk_r+0x1a>
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
 8003c48:	200001d4 	.word	0x200001d4

08003c4c <__malloc_lock>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	; (8003c54 <__malloc_lock+0x8>)
 8003c4e:	f000 b811 	b.w	8003c74 <__retarget_lock_acquire_recursive>
 8003c52:	bf00      	nop
 8003c54:	200001d8 	.word	0x200001d8

08003c58 <__malloc_unlock>:
 8003c58:	4801      	ldr	r0, [pc, #4]	; (8003c60 <__malloc_unlock+0x8>)
 8003c5a:	f000 b80c 	b.w	8003c76 <__retarget_lock_release_recursive>
 8003c5e:	bf00      	nop
 8003c60:	200001d8 	.word	0x200001d8

08003c64 <_malloc_usable_size_r>:
 8003c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c68:	1f18      	subs	r0, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bfbc      	itt	lt
 8003c6e:	580b      	ldrlt	r3, [r1, r0]
 8003c70:	18c0      	addlt	r0, r0, r3
 8003c72:	4770      	bx	lr

08003c74 <__retarget_lock_acquire_recursive>:
 8003c74:	4770      	bx	lr

08003c76 <__retarget_lock_release_recursive>:
 8003c76:	4770      	bx	lr

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
