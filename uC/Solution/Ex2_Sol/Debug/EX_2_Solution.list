
EX_2_Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003494  08003494  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800349c  0800349c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  080034b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080034b0  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f704  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ff  00000000  00000000  0002f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00031a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00032798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d74  00000000  00000000  00033408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001074e  00000000  00000000  0004b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000994a0  00000000  00000000  0005b8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4d6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003814  00000000  00000000  000f4dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003464 	.word	0x08003464

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003464 	.word	0x08003464

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2uiz>:
 8000550:	004a      	lsls	r2, r1, #1
 8000552:	d211      	bcs.n	8000578 <__aeabi_d2uiz+0x28>
 8000554:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000558:	d211      	bcs.n	800057e <__aeabi_d2uiz+0x2e>
 800055a:	d50d      	bpl.n	8000578 <__aeabi_d2uiz+0x28>
 800055c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000564:	d40e      	bmi.n	8000584 <__aeabi_d2uiz+0x34>
 8000566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800056a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000572:	fa23 f002 	lsr.w	r0, r3, r2
 8000576:	4770      	bx	lr
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	4770      	bx	lr
 800057e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000582:	d102      	bne.n	800058a <__aeabi_d2uiz+0x3a>
 8000584:	f04f 30ff 	mov.w	r0, #4294967295
 8000588:	4770      	bx	lr
 800058a:	f04f 0000 	mov.w	r0, #0
 800058e:	4770      	bx	lr

08000590 <__aeabi_uldivmod>:
 8000590:	b953      	cbnz	r3, 80005a8 <__aeabi_uldivmod+0x18>
 8000592:	b94a      	cbnz	r2, 80005a8 <__aeabi_uldivmod+0x18>
 8000594:	2900      	cmp	r1, #0
 8000596:	bf08      	it	eq
 8000598:	2800      	cmpeq	r0, #0
 800059a:	bf1c      	itt	ne
 800059c:	f04f 31ff 	movne.w	r1, #4294967295
 80005a0:	f04f 30ff 	movne.w	r0, #4294967295
 80005a4:	f000 b974 	b.w	8000890 <__aeabi_idiv0>
 80005a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005b0:	f000 f806 	bl	80005c0 <__udivmoddi4>
 80005b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005bc:	b004      	add	sp, #16
 80005be:	4770      	bx	lr

080005c0 <__udivmoddi4>:
 80005c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005c4:	9d08      	ldr	r5, [sp, #32]
 80005c6:	4604      	mov	r4, r0
 80005c8:	468e      	mov	lr, r1
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d14d      	bne.n	800066a <__udivmoddi4+0xaa>
 80005ce:	428a      	cmp	r2, r1
 80005d0:	4694      	mov	ip, r2
 80005d2:	d969      	bls.n	80006a8 <__udivmoddi4+0xe8>
 80005d4:	fab2 f282 	clz	r2, r2
 80005d8:	b152      	cbz	r2, 80005f0 <__udivmoddi4+0x30>
 80005da:	fa01 f302 	lsl.w	r3, r1, r2
 80005de:	f1c2 0120 	rsb	r1, r2, #32
 80005e2:	fa20 f101 	lsr.w	r1, r0, r1
 80005e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ea:	ea41 0e03 	orr.w	lr, r1, r3
 80005ee:	4094      	lsls	r4, r2
 80005f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005f4:	0c21      	lsrs	r1, r4, #16
 80005f6:	fbbe f6f8 	udiv	r6, lr, r8
 80005fa:	fa1f f78c 	uxth.w	r7, ip
 80005fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000602:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000606:	fb06 f107 	mul.w	r1, r6, r7
 800060a:	4299      	cmp	r1, r3
 800060c:	d90a      	bls.n	8000624 <__udivmoddi4+0x64>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f106 30ff 	add.w	r0, r6, #4294967295
 8000616:	f080 811f 	bcs.w	8000858 <__udivmoddi4+0x298>
 800061a:	4299      	cmp	r1, r3
 800061c:	f240 811c 	bls.w	8000858 <__udivmoddi4+0x298>
 8000620:	3e02      	subs	r6, #2
 8000622:	4463      	add	r3, ip
 8000624:	1a5b      	subs	r3, r3, r1
 8000626:	b2a4      	uxth	r4, r4
 8000628:	fbb3 f0f8 	udiv	r0, r3, r8
 800062c:	fb08 3310 	mls	r3, r8, r0, r3
 8000630:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000634:	fb00 f707 	mul.w	r7, r0, r7
 8000638:	42a7      	cmp	r7, r4
 800063a:	d90a      	bls.n	8000652 <__udivmoddi4+0x92>
 800063c:	eb1c 0404 	adds.w	r4, ip, r4
 8000640:	f100 33ff 	add.w	r3, r0, #4294967295
 8000644:	f080 810a 	bcs.w	800085c <__udivmoddi4+0x29c>
 8000648:	42a7      	cmp	r7, r4
 800064a:	f240 8107 	bls.w	800085c <__udivmoddi4+0x29c>
 800064e:	4464      	add	r4, ip
 8000650:	3802      	subs	r0, #2
 8000652:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000656:	1be4      	subs	r4, r4, r7
 8000658:	2600      	movs	r6, #0
 800065a:	b11d      	cbz	r5, 8000664 <__udivmoddi4+0xa4>
 800065c:	40d4      	lsrs	r4, r2
 800065e:	2300      	movs	r3, #0
 8000660:	e9c5 4300 	strd	r4, r3, [r5]
 8000664:	4631      	mov	r1, r6
 8000666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066a:	428b      	cmp	r3, r1
 800066c:	d909      	bls.n	8000682 <__udivmoddi4+0xc2>
 800066e:	2d00      	cmp	r5, #0
 8000670:	f000 80ef 	beq.w	8000852 <__udivmoddi4+0x292>
 8000674:	2600      	movs	r6, #0
 8000676:	e9c5 0100 	strd	r0, r1, [r5]
 800067a:	4630      	mov	r0, r6
 800067c:	4631      	mov	r1, r6
 800067e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000682:	fab3 f683 	clz	r6, r3
 8000686:	2e00      	cmp	r6, #0
 8000688:	d14a      	bne.n	8000720 <__udivmoddi4+0x160>
 800068a:	428b      	cmp	r3, r1
 800068c:	d302      	bcc.n	8000694 <__udivmoddi4+0xd4>
 800068e:	4282      	cmp	r2, r0
 8000690:	f200 80f9 	bhi.w	8000886 <__udivmoddi4+0x2c6>
 8000694:	1a84      	subs	r4, r0, r2
 8000696:	eb61 0303 	sbc.w	r3, r1, r3
 800069a:	2001      	movs	r0, #1
 800069c:	469e      	mov	lr, r3
 800069e:	2d00      	cmp	r5, #0
 80006a0:	d0e0      	beq.n	8000664 <__udivmoddi4+0xa4>
 80006a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006a6:	e7dd      	b.n	8000664 <__udivmoddi4+0xa4>
 80006a8:	b902      	cbnz	r2, 80006ac <__udivmoddi4+0xec>
 80006aa:	deff      	udf	#255	; 0xff
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	f040 8092 	bne.w	80007da <__udivmoddi4+0x21a>
 80006b6:	eba1 010c 	sub.w	r1, r1, ip
 80006ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006be:	fa1f fe8c 	uxth.w	lr, ip
 80006c2:	2601      	movs	r6, #1
 80006c4:	0c20      	lsrs	r0, r4, #16
 80006c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80006ca:	fb07 1113 	mls	r1, r7, r3, r1
 80006ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006d2:	fb0e f003 	mul.w	r0, lr, r3
 80006d6:	4288      	cmp	r0, r1
 80006d8:	d908      	bls.n	80006ec <__udivmoddi4+0x12c>
 80006da:	eb1c 0101 	adds.w	r1, ip, r1
 80006de:	f103 38ff 	add.w	r8, r3, #4294967295
 80006e2:	d202      	bcs.n	80006ea <__udivmoddi4+0x12a>
 80006e4:	4288      	cmp	r0, r1
 80006e6:	f200 80cb 	bhi.w	8000880 <__udivmoddi4+0x2c0>
 80006ea:	4643      	mov	r3, r8
 80006ec:	1a09      	subs	r1, r1, r0
 80006ee:	b2a4      	uxth	r4, r4
 80006f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80006f4:	fb07 1110 	mls	r1, r7, r0, r1
 80006f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80006fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000700:	45a6      	cmp	lr, r4
 8000702:	d908      	bls.n	8000716 <__udivmoddi4+0x156>
 8000704:	eb1c 0404 	adds.w	r4, ip, r4
 8000708:	f100 31ff 	add.w	r1, r0, #4294967295
 800070c:	d202      	bcs.n	8000714 <__udivmoddi4+0x154>
 800070e:	45a6      	cmp	lr, r4
 8000710:	f200 80bb 	bhi.w	800088a <__udivmoddi4+0x2ca>
 8000714:	4608      	mov	r0, r1
 8000716:	eba4 040e 	sub.w	r4, r4, lr
 800071a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800071e:	e79c      	b.n	800065a <__udivmoddi4+0x9a>
 8000720:	f1c6 0720 	rsb	r7, r6, #32
 8000724:	40b3      	lsls	r3, r6
 8000726:	fa22 fc07 	lsr.w	ip, r2, r7
 800072a:	ea4c 0c03 	orr.w	ip, ip, r3
 800072e:	fa20 f407 	lsr.w	r4, r0, r7
 8000732:	fa01 f306 	lsl.w	r3, r1, r6
 8000736:	431c      	orrs	r4, r3
 8000738:	40f9      	lsrs	r1, r7
 800073a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800073e:	fa00 f306 	lsl.w	r3, r0, r6
 8000742:	fbb1 f8f9 	udiv	r8, r1, r9
 8000746:	0c20      	lsrs	r0, r4, #16
 8000748:	fa1f fe8c 	uxth.w	lr, ip
 800074c:	fb09 1118 	mls	r1, r9, r8, r1
 8000750:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000754:	fb08 f00e 	mul.w	r0, r8, lr
 8000758:	4288      	cmp	r0, r1
 800075a:	fa02 f206 	lsl.w	r2, r2, r6
 800075e:	d90b      	bls.n	8000778 <__udivmoddi4+0x1b8>
 8000760:	eb1c 0101 	adds.w	r1, ip, r1
 8000764:	f108 3aff 	add.w	sl, r8, #4294967295
 8000768:	f080 8088 	bcs.w	800087c <__udivmoddi4+0x2bc>
 800076c:	4288      	cmp	r0, r1
 800076e:	f240 8085 	bls.w	800087c <__udivmoddi4+0x2bc>
 8000772:	f1a8 0802 	sub.w	r8, r8, #2
 8000776:	4461      	add	r1, ip
 8000778:	1a09      	subs	r1, r1, r0
 800077a:	b2a4      	uxth	r4, r4
 800077c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000780:	fb09 1110 	mls	r1, r9, r0, r1
 8000784:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000788:	fb00 fe0e 	mul.w	lr, r0, lr
 800078c:	458e      	cmp	lr, r1
 800078e:	d908      	bls.n	80007a2 <__udivmoddi4+0x1e2>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f100 34ff 	add.w	r4, r0, #4294967295
 8000798:	d26c      	bcs.n	8000874 <__udivmoddi4+0x2b4>
 800079a:	458e      	cmp	lr, r1
 800079c:	d96a      	bls.n	8000874 <__udivmoddi4+0x2b4>
 800079e:	3802      	subs	r0, #2
 80007a0:	4461      	add	r1, ip
 80007a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007a6:	fba0 9402 	umull	r9, r4, r0, r2
 80007aa:	eba1 010e 	sub.w	r1, r1, lr
 80007ae:	42a1      	cmp	r1, r4
 80007b0:	46c8      	mov	r8, r9
 80007b2:	46a6      	mov	lr, r4
 80007b4:	d356      	bcc.n	8000864 <__udivmoddi4+0x2a4>
 80007b6:	d053      	beq.n	8000860 <__udivmoddi4+0x2a0>
 80007b8:	b15d      	cbz	r5, 80007d2 <__udivmoddi4+0x212>
 80007ba:	ebb3 0208 	subs.w	r2, r3, r8
 80007be:	eb61 010e 	sbc.w	r1, r1, lr
 80007c2:	fa01 f707 	lsl.w	r7, r1, r7
 80007c6:	fa22 f306 	lsr.w	r3, r2, r6
 80007ca:	40f1      	lsrs	r1, r6
 80007cc:	431f      	orrs	r7, r3
 80007ce:	e9c5 7100 	strd	r7, r1, [r5]
 80007d2:	2600      	movs	r6, #0
 80007d4:	4631      	mov	r1, r6
 80007d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007da:	f1c2 0320 	rsb	r3, r2, #32
 80007de:	40d8      	lsrs	r0, r3
 80007e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e4:	fa21 f303 	lsr.w	r3, r1, r3
 80007e8:	4091      	lsls	r1, r2
 80007ea:	4301      	orrs	r1, r0
 80007ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007f0:	fa1f fe8c 	uxth.w	lr, ip
 80007f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80007f8:	fb07 3610 	mls	r6, r7, r0, r3
 80007fc:	0c0b      	lsrs	r3, r1, #16
 80007fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000802:	fb00 f60e 	mul.w	r6, r0, lr
 8000806:	429e      	cmp	r6, r3
 8000808:	fa04 f402 	lsl.w	r4, r4, r2
 800080c:	d908      	bls.n	8000820 <__udivmoddi4+0x260>
 800080e:	eb1c 0303 	adds.w	r3, ip, r3
 8000812:	f100 38ff 	add.w	r8, r0, #4294967295
 8000816:	d22f      	bcs.n	8000878 <__udivmoddi4+0x2b8>
 8000818:	429e      	cmp	r6, r3
 800081a:	d92d      	bls.n	8000878 <__udivmoddi4+0x2b8>
 800081c:	3802      	subs	r0, #2
 800081e:	4463      	add	r3, ip
 8000820:	1b9b      	subs	r3, r3, r6
 8000822:	b289      	uxth	r1, r1
 8000824:	fbb3 f6f7 	udiv	r6, r3, r7
 8000828:	fb07 3316 	mls	r3, r7, r6, r3
 800082c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000830:	fb06 f30e 	mul.w	r3, r6, lr
 8000834:	428b      	cmp	r3, r1
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x28a>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000840:	d216      	bcs.n	8000870 <__udivmoddi4+0x2b0>
 8000842:	428b      	cmp	r3, r1
 8000844:	d914      	bls.n	8000870 <__udivmoddi4+0x2b0>
 8000846:	3e02      	subs	r6, #2
 8000848:	4461      	add	r1, ip
 800084a:	1ac9      	subs	r1, r1, r3
 800084c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000850:	e738      	b.n	80006c4 <__udivmoddi4+0x104>
 8000852:	462e      	mov	r6, r5
 8000854:	4628      	mov	r0, r5
 8000856:	e705      	b.n	8000664 <__udivmoddi4+0xa4>
 8000858:	4606      	mov	r6, r0
 800085a:	e6e3      	b.n	8000624 <__udivmoddi4+0x64>
 800085c:	4618      	mov	r0, r3
 800085e:	e6f8      	b.n	8000652 <__udivmoddi4+0x92>
 8000860:	454b      	cmp	r3, r9
 8000862:	d2a9      	bcs.n	80007b8 <__udivmoddi4+0x1f8>
 8000864:	ebb9 0802 	subs.w	r8, r9, r2
 8000868:	eb64 0e0c 	sbc.w	lr, r4, ip
 800086c:	3801      	subs	r0, #1
 800086e:	e7a3      	b.n	80007b8 <__udivmoddi4+0x1f8>
 8000870:	4646      	mov	r6, r8
 8000872:	e7ea      	b.n	800084a <__udivmoddi4+0x28a>
 8000874:	4620      	mov	r0, r4
 8000876:	e794      	b.n	80007a2 <__udivmoddi4+0x1e2>
 8000878:	4640      	mov	r0, r8
 800087a:	e7d1      	b.n	8000820 <__udivmoddi4+0x260>
 800087c:	46d0      	mov	r8, sl
 800087e:	e77b      	b.n	8000778 <__udivmoddi4+0x1b8>
 8000880:	3b02      	subs	r3, #2
 8000882:	4461      	add	r1, ip
 8000884:	e732      	b.n	80006ec <__udivmoddi4+0x12c>
 8000886:	4630      	mov	r0, r6
 8000888:	e709      	b.n	800069e <__udivmoddi4+0xde>
 800088a:	4464      	add	r4, ip
 800088c:	3802      	subs	r0, #2
 800088e:	e742      	b.n	8000716 <__udivmoddi4+0x156>

08000890 <__aeabi_idiv0>:
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008a8:	4a22      	ldr	r2, [pc, #136]	; (8000934 <MX_ADC1_Init+0xa0>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008fa:	f000 fc05 	bl	8001108 <HAL_ADC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000904:	f000 f97e 	bl	8000c04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000908:	2300      	movs	r3, #0
 800090a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000910:	2302      	movs	r3, #2
 8000912:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_ADC1_Init+0x9c>)
 800091a:	f000 fe33 	bl	8001584 <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000924:	f000 f96e 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000028 	.word	0x20000028
 8000934:	40012000 	.word	0x40012000

08000938 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <HAL_ADC_MspInit+0x8c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d12f      	bne.n	80009ba <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <HAL_ADC_MspInit+0x90>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a19      	ldr	r2, [pc, #100]	; (80009c8 <HAL_ADC_MspInit+0x90>)
 8000964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <HAL_ADC_MspInit+0x90>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <HAL_ADC_MspInit+0x90>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <HAL_ADC_MspInit+0x90>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_ADC_MspInit+0x90>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000996:	2303      	movs	r3, #3
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <HAL_ADC_MspInit+0x94>)
 80009a6:	f001 f937 	bl	8001c18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2012      	movs	r0, #18
 80009b0:	f001 f8fb 	bl	8001baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009b4:	2012      	movs	r0, #18
 80009b6:	f001 f914 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40012000 	.word	0x40012000
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b41      	ldr	r3, [pc, #260]	; (8000af0 <MX_GPIO_Init+0x120>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a40      	ldr	r2, [pc, #256]	; (8000af0 <MX_GPIO_Init+0x120>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <MX_GPIO_Init+0x120>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <MX_GPIO_Init+0x120>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a39      	ldr	r2, [pc, #228]	; (8000af0 <MX_GPIO_Init+0x120>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <MX_GPIO_Init+0x120>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <MX_GPIO_Init+0x120>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a32      	ldr	r2, [pc, #200]	; (8000af0 <MX_GPIO_Init+0x120>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <MX_GPIO_Init+0x120>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <MX_GPIO_Init+0x120>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a2b      	ldr	r2, [pc, #172]	; (8000af0 <MX_GPIO_Init+0x120>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <MX_GPIO_Init+0x120>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_6_Pin|LED_5_Pin|LED_4_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000a5c:	4825      	ldr	r0, [pc, #148]	; (8000af4 <MX_GPIO_Init+0x124>)
 8000a5e:	f001 fa5f 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	4824      	ldr	r0, [pc, #144]	; (8000af8 <MX_GPIO_Init+0x128>)
 8000a68:	f001 fa5a 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2140      	movs	r1, #64	; 0x40
 8000a70:	4822      	ldr	r0, [pc, #136]	; (8000afc <MX_GPIO_Init+0x12c>)
 8000a72:	f001 fa55 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a7c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481a      	ldr	r0, [pc, #104]	; (8000af8 <MX_GPIO_Init+0x128>)
 8000a8e:	f001 f8c3 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_5_Pin|LED_4_Pin|LED_1_Pin;
 8000a92:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4812      	ldr	r0, [pc, #72]	; (8000af4 <MX_GPIO_Init+0x124>)
 8000aac:	f001 f8b4 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <MX_GPIO_Init+0x128>)
 8000ac8:	f001 f8a6 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 8000acc:	2340      	movs	r3, #64	; 0x40
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <MX_GPIO_Init+0x12c>)
 8000ae4:	f001 f898 	bl	8001c18 <HAL_GPIO_Init>

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40020800 	.word	0x40020800
 8000afc:	40020400 	.word	0x40020400

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b04:	f000 fa8e 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b08:	f000 f814 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0c:	f7ff ff60 	bl	80009d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b10:	f000 f9ec 	bl	8000eec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b14:	f7ff febe 	bl	8000894 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b18:	f000 f978 	bl	8000e0c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  	  /*
  	   * ADC Start, this enable the ADC and the other conversions are launched by TIMER3 automatically
  	   */
  	  HAL_ADC_Start_IT(&hadc1);
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <main+0x2c>)
 8000b1e:	f000 fb37 	bl	8001190 <HAL_ADC_Start_IT>


  	  /*
  	   * Timer 3 time base start in interrupt mode
  	   */
  	  HAL_TIM_Base_Start_IT(&htim3);
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <main+0x30>)
 8000b24:	f001 fefe 	bl	8002924 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <main+0x28>
 8000b2a:	bf00      	nop
 8000b2c:	20000028 	.word	0x20000028
 8000b30:	20000074 	.word	0x20000074

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b094      	sub	sp, #80	; 0x50
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	2230      	movs	r2, #48	; 0x30
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 fc86 	bl	8003454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <SystemClock_Config+0xc8>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a26      	ldr	r2, [pc, #152]	; (8000bfc <SystemClock_Config+0xc8>)
 8000b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <SystemClock_Config+0xc8>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <SystemClock_Config+0xcc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a20      	ldr	r2, [pc, #128]	; (8000c00 <SystemClock_Config+0xcc>)
 8000b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <SystemClock_Config+0xcc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b90:	2301      	movs	r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b94:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ba8:	2364      	movs	r3, #100	; 0x64
 8000baa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	f107 0320 	add.w	r3, r7, #32
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 f9cb 	bl	8001f54 <HAL_RCC_OscConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bc4:	f000 f81e 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc8:	230f      	movs	r3, #15
 8000bca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2103      	movs	r1, #3
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 fc2d 	bl	8002444 <HAL_RCC_ClockConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bf0:	f000 f808 	bl	8000c04 <Error_Handler>
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	3750      	adds	r7, #80	; 0x50
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40007000 	.word	0x40007000

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c4e:	2007      	movs	r0, #7
 8000c50:	f000 ffa0 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 fa0c 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	/*
	 * This function (ADC_IRQHandler) is called every time the ADC complete the conversion
	 */
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000cb8:	4808      	ldr	r0, [pc, #32]	; (8000cdc <ADC_IRQHandler+0x28>)
 8000cba:	f000 fb27 	bl	800130c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  adc_val=HAL_ADC_GetValue(&hadc1);
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <ADC_IRQHandler+0x28>)
 8000cc0:	f000 fc34 	bl	800152c <HAL_ADC_GetValue>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <ADC_IRQHandler+0x2c>)
 8000cca:	801a      	strh	r2, [r3, #0]

  LED_Driver(adc_val);
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <ADC_IRQHandler+0x2c>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 f807 	bl	8000ce4 <LED_Driver>

  /* USER CODE END ADC_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000028 	.word	0x20000028
 8000ce0:	20000070 	.word	0x20000070

08000ce4 <LED_Driver>:
/*
 * Driver function for the external LEDs
 * This function receive the value from the ADC and turn on a number
 * of LED proportional to the ADC value
 */
void LED_Driver(uint16_t valADC){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
  /*
   * The value from the ADC is mapped on the integers
   * from 0 to 6.
   * The round function return the most near integer of the argument
   */
  stato=round(adc_val*7/4096);
 8000cee:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <LED_Driver+0xf0>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	1a9b      	subs	r3, r3, r2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	da01      	bge.n	8000d02 <LED_Driver+0x1e>
 8000cfe:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000d02:	131b      	asrs	r3, r3, #12
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fbb9 	bl	800047c <__aeabi_i2d>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	f7ff fc1d 	bl	8000550 <__aeabi_d2uiz>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <LED_Driver+0xf4>)
 8000d1c:	701a      	strb	r2, [r3, #0]

  //Let's turn off all the LED
  HAL_GPIO_WritePin(GPIOA, LED_6_Pin|LED_5_Pin|LED_4_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000d24:	482d      	ldr	r0, [pc, #180]	; (8000ddc <LED_Driver+0xf8>)
 8000d26:	f001 f8fb 	bl	8001f20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	482c      	ldr	r0, [pc, #176]	; (8000de0 <LED_Driver+0xfc>)
 8000d30:	f001 f8f6 	bl	8001f20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	482a      	ldr	r0, [pc, #168]	; (8000de4 <LED_Driver+0x100>)
 8000d3a:	f001 f8f1 	bl	8001f20 <HAL_GPIO_WritePin>


  //Let's turn on only the necessary LED
  for(int i=0;i<=stato;i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	e03c      	b.n	8000dbe <LED_Driver+0xda>
  {
	  switch(i)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	2b05      	cmp	r3, #5
 8000d4a:	d834      	bhi.n	8000db6 <LED_Driver+0xd2>
 8000d4c:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <LED_Driver+0x70>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000d6d 	.word	0x08000d6d
 8000d58:	08000d7b 	.word	0x08000d7b
 8000d5c:	08000d87 	.word	0x08000d87
 8000d60:	08000d93 	.word	0x08000d93
 8000d64:	08000d9f 	.word	0x08000d9f
 8000d68:	08000dab 	.word	0x08000dab
	  {
	  	  case 1:
	  		  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d72:	481a      	ldr	r0, [pc, #104]	; (8000ddc <LED_Driver+0xf8>)
 8000d74:	f001 f8d4 	bl	8001f20 <HAL_GPIO_WritePin>
	  		  break;
 8000d78:	e01e      	b.n	8000db8 <LED_Driver+0xd4>
	  	  case 2:
	  		  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	4818      	ldr	r0, [pc, #96]	; (8000de0 <LED_Driver+0xfc>)
 8000d80:	f001 f8ce 	bl	8001f20 <HAL_GPIO_WritePin>
			  break;
 8000d84:	e018      	b.n	8000db8 <LED_Driver+0xd4>
	  	  case 3:
			  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2140      	movs	r1, #64	; 0x40
 8000d8a:	4816      	ldr	r0, [pc, #88]	; (8000de4 <LED_Driver+0x100>)
 8000d8c:	f001 f8c8 	bl	8001f20 <HAL_GPIO_WritePin>
			  break;
 8000d90:	e012      	b.n	8000db8 <LED_Driver+0xd4>
	  	  case 4:
			  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	4811      	ldr	r0, [pc, #68]	; (8000ddc <LED_Driver+0xf8>)
 8000d98:	f001 f8c2 	bl	8001f20 <HAL_GPIO_WritePin>
			  break;
 8000d9c:	e00c      	b.n	8000db8 <LED_Driver+0xd4>
	  	  case 5:
			  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2140      	movs	r1, #64	; 0x40
 8000da2:	480e      	ldr	r0, [pc, #56]	; (8000ddc <LED_Driver+0xf8>)
 8000da4:	f001 f8bc 	bl	8001f20 <HAL_GPIO_WritePin>
			  break;
 8000da8:	e006      	b.n	8000db8 <LED_Driver+0xd4>
	  	  case 6:
			  HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2120      	movs	r1, #32
 8000dae:	480b      	ldr	r0, [pc, #44]	; (8000ddc <LED_Driver+0xf8>)
 8000db0:	f001 f8b6 	bl	8001f20 <HAL_GPIO_WritePin>
			  break;
 8000db4:	e000      	b.n	8000db8 <LED_Driver+0xd4>
	  	  default:
	  		  break;
 8000db6:	bf00      	nop
  for(int i=0;i<=stato;i++)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <LED_Driver+0xf4>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	ddbc      	ble.n	8000d44 <LED_Driver+0x60>
	  }
  }
  return;
 8000dca:	bf00      	nop
}
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000070 	.word	0x20000070
 8000dd8:	20000072 	.word	0x20000072
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020400 	.word	0x40020400

08000de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	463b      	mov	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_TIM3_Init+0x94>)
 8000e2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ea4 <MX_TIM3_Init+0x98>)
 8000e2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_TIM3_Init+0x94>)
 8000e30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_TIM3_Init+0x94>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_TIM3_Init+0x94>)
 8000e3e:	22c7      	movs	r2, #199	; 0xc7
 8000e40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_TIM3_Init+0x94>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_TIM3_Init+0x94>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e4e:	4814      	ldr	r0, [pc, #80]	; (8000ea0 <MX_TIM3_Init+0x94>)
 8000e50:	f001 fd18 	bl	8002884 <HAL_TIM_Base_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e5a:	f7ff fed3 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <MX_TIM3_Init+0x94>)
 8000e6c:	f001 fdbc 	bl	80029e8 <HAL_TIM_ConfigClockSource>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e76:	f7ff fec5 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e7a:	2320      	movs	r3, #32
 8000e7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <MX_TIM3_Init+0x94>)
 8000e88:	f001 ff90 	bl	8002dac <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e92:	f7ff feb7 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000074 	.word	0x20000074
 8000ea4:	40000400 	.word	0x40000400

08000ea8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_TIM_Base_MspInit+0x3c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10d      	bne.n	8000ed6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_TIM_Base_MspInit+0x40>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <HAL_TIM_Base_MspInit+0x40>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <HAL_TIM_Base_MspInit+0x40>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40000400 	.word	0x40000400
 8000ee8:	40023800 	.word	0x40023800

08000eec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MX_USART2_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f24:	f001 ffb0 	bl	8002e88 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f2e:	f7ff fe69 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000bc 	.word	0x200000bc
 8000f3c:	40004400 	.word	0x40004400

08000f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <HAL_UART_MspInit+0x84>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d12b      	bne.n	8000fba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f9a:	230c      	movs	r3, #12
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000faa:	2307      	movs	r3, #7
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_UART_MspInit+0x8c>)
 8000fb6:	f000 fe2f 	bl	8001c18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fd6:	490e      	ldr	r1, [pc, #56]	; (8001010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fec:	4c0b      	ldr	r4, [pc, #44]	; (800101c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff fef5 	bl	8000de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f002 fa05 	bl	800340c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fd7d 	bl	8000b00 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001014:	080034a4 	.word	0x080034a4
  ldr r2, =_sbss
 8001018:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800101c:	20000104 	.word	0x20000104

08001020 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <DMA1_Stream0_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 fda1 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fdda 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fdb9 	bl	8001bfe <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 fd81 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000004 	.word	0x20000004

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000100 	.word	0x20000100

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000100 	.word	0x20000100

08001108 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e033      	b.n	8001186 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	2b00      	cmp	r3, #0
 8001124:	d109      	bne.n	800113a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fc06 	bl	8000938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	d118      	bne.n	8001178 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800114e:	f023 0302 	bic.w	r3, r3, #2
 8001152:	f043 0202 	orr.w	r2, r3, #2
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 fb44 	bl	80017e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f023 0303 	bic.w	r3, r3, #3
 800116e:	f043 0201 	orr.w	r2, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
 8001176:	e001      	b.n	800117c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <HAL_ADC_Start_IT+0x1a>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e0a1      	b.n	80012ee <HAL_ADC_Start_IT+0x15e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d018      	beq.n	80011f2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0201 	orr.w	r2, r2, #1
 80011ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011d0:	4b4a      	ldr	r3, [pc, #296]	; (80012fc <HAL_ADC_Start_IT+0x16c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a4a      	ldr	r2, [pc, #296]	; (8001300 <HAL_ADC_Start_IT+0x170>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	0c9a      	lsrs	r2, r3, #18
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011e4:	e002      	b.n	80011ec <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f9      	bne.n	80011e6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d169      	bne.n	80012d4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800122a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800123e:	d106      	bne.n	800124e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f023 0206 	bic.w	r2, r3, #6
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	645a      	str	r2, [r3, #68]	; 0x44
 800124c:	e002      	b.n	8001254 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <HAL_ADC_Start_IT+0x174>)
 800125e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001268:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001278:	f043 0320 	orr.w	r3, r3, #32
 800127c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10f      	bne.n	80012aa <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d129      	bne.n	80012ec <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	e020      	b.n	80012ec <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <HAL_ADC_Start_IT+0x178>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d11b      	bne.n	80012ec <HAL_ADC_Start_IT+0x15c>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d114      	bne.n	80012ec <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	e00b      	b.n	80012ec <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f043 0210 	orr.w	r2, r3, #16
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	f043 0201 	orr.w	r2, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000000 	.word	0x20000000
 8001300:	431bde83 	.word	0x431bde83
 8001304:	40012300 	.word	0x40012300
 8001308:	40012000 	.word	0x40012000

0800130c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f003 0320 	and.w	r3, r3, #32
 800133a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d049      	beq.n	80013d6 <HAL_ADC_IRQHandler+0xca>
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d046      	beq.n	80013d6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f003 0310 	and.w	r3, r3, #16
 8001350:	2b00      	cmp	r3, #0
 8001352:	d105      	bne.n	8001360 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d12b      	bne.n	80013c6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001372:	2b00      	cmp	r3, #0
 8001374:	d127      	bne.n	80013c6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800138e:	2b00      	cmp	r3, #0
 8001390:	d119      	bne.n	80013c6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0220 	bic.w	r2, r2, #32
 80013a0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d105      	bne.n	80013c6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f8bd 	bl	8001546 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f06f 0212 	mvn.w	r2, #18
 80013d4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d057      	beq.n	800149c <HAL_ADC_IRQHandler+0x190>
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d054      	beq.n	800149c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d139      	bne.n	800148c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001430:	2b00      	cmp	r3, #0
 8001432:	d12b      	bne.n	800148c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800143e:	2b00      	cmp	r3, #0
 8001440:	d124      	bne.n	800148c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800144c:	2b00      	cmp	r3, #0
 800144e:	d11d      	bne.n	800148c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001454:	2b00      	cmp	r3, #0
 8001456:	d119      	bne.n	800148c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001466:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147c:	2b00      	cmp	r3, #0
 800147e:	d105      	bne.n	800148c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 faa7 	bl	80019e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f06f 020c 	mvn.w	r2, #12
 800149a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014aa:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d017      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x1d6>
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d014      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d10d      	bne.n	80014e2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f841 	bl	800155a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f06f 0201 	mvn.w	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f003 0320 	and.w	r3, r3, #32
 80014e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014f0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d015      	beq.n	8001524 <HAL_ADC_IRQHandler+0x218>
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d012      	beq.n	8001524 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f043 0202 	orr.w	r2, r3, #2
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f06f 0220 	mvn.w	r2, #32
 8001512:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f82a 	bl	800156e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f06f 0220 	mvn.w	r2, #32
 8001522:	601a      	str	r2, [r3, #0]
  }
}
 8001524:	bf00      	nop
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x1c>
 800159c:	2302      	movs	r3, #2
 800159e:	e113      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x244>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	d925      	bls.n	80015fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68d9      	ldr	r1, [r3, #12]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	3b1e      	subs	r3, #30
 80015c6:	2207      	movs	r2, #7
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43da      	mvns	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	400a      	ands	r2, r1
 80015d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68d9      	ldr	r1, [r3, #12]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	4603      	mov	r3, r0
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4403      	add	r3, r0
 80015ee:	3b1e      	subs	r3, #30
 80015f0:	409a      	lsls	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	e022      	b.n	8001642 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6919      	ldr	r1, [r3, #16]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	2207      	movs	r2, #7
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	400a      	ands	r2, r1
 800161e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6919      	ldr	r1, [r3, #16]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	4603      	mov	r3, r0
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4403      	add	r3, r0
 8001638:	409a      	lsls	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b06      	cmp	r3, #6
 8001648:	d824      	bhi.n	8001694 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	3b05      	subs	r3, #5
 800165c:	221f      	movs	r2, #31
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	400a      	ands	r2, r1
 800166a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	3b05      	subs	r3, #5
 8001686:	fa00 f203 	lsl.w	r2, r0, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
 8001692:	e04c      	b.n	800172e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b0c      	cmp	r3, #12
 800169a:	d824      	bhi.n	80016e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b23      	subs	r3, #35	; 0x23
 80016ae:	221f      	movs	r2, #31
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43da      	mvns	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	400a      	ands	r2, r1
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	3b23      	subs	r3, #35	; 0x23
 80016d8:	fa00 f203 	lsl.w	r2, r0, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
 80016e4:	e023      	b.n	800172e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b41      	subs	r3, #65	; 0x41
 80016f8:	221f      	movs	r2, #31
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	400a      	ands	r2, r1
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3b41      	subs	r3, #65	; 0x41
 8001722:	fa00 f203 	lsl.w	r2, r0, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172e:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_ADC_ConfigChannel+0x250>)
 8001730:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <HAL_ADC_ConfigChannel+0x254>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d10f      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1d8>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b12      	cmp	r3, #18
 8001742:	d10b      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_ADC_ConfigChannel+0x254>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12b      	bne.n	80017be <HAL_ADC_ConfigChannel+0x23a>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <HAL_ADC_ConfigChannel+0x258>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d003      	beq.n	8001778 <HAL_ADC_ConfigChannel+0x1f4>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b11      	cmp	r3, #17
 8001776:	d122      	bne.n	80017be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a11      	ldr	r2, [pc, #68]	; (80017dc <HAL_ADC_ConfigChannel+0x258>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d111      	bne.n	80017be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_ADC_ConfigChannel+0x25c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <HAL_ADC_ConfigChannel+0x260>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	0c9a      	lsrs	r2, r3, #18
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b0:	e002      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f9      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40012300 	.word	0x40012300
 80017d8:	40012000 	.word	0x40012000
 80017dc:	10000012 	.word	0x10000012
 80017e0:	20000000 	.word	0x20000000
 80017e4:	431bde83 	.word	0x431bde83

080017e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f0:	4b79      	ldr	r3, [pc, #484]	; (80019d8 <ADC_Init+0x1f0>)
 80017f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	431a      	orrs	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800181c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	021a      	lsls	r2, r3, #8
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001862:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6899      	ldr	r1, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	4a58      	ldr	r2, [pc, #352]	; (80019dc <ADC_Init+0x1f4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d022      	beq.n	80018c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800188e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6899      	ldr	r1, [r3, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6899      	ldr	r1, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	e00f      	b.n	80018e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0202 	bic.w	r2, r2, #2
 80018f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6899      	ldr	r1, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7e1b      	ldrb	r3, [r3, #24]
 8001900:	005a      	lsls	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01b      	beq.n	800194c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001922:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001932:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	3b01      	subs	r3, #1
 8001940:	035a      	lsls	r2, r3, #13
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	e007      	b.n	800195c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	3b01      	subs	r3, #1
 8001978:	051a      	lsls	r2, r3, #20
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6899      	ldr	r1, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800199e:	025a      	lsls	r2, r3, #9
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	029a      	lsls	r2, r3, #10
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	609a      	str	r2, [r3, #8]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40012300 	.word	0x40012300
 80019dc:	0f000001 	.word	0x0f000001

080019e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff8e 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff29 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff3e 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff8e 	bl	8001ae8 <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff31 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa2 	bl	8001b50 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e159      	b.n	8001ee8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c34:	2201      	movs	r2, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	f040 8148 	bne.w	8001ee2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d005      	beq.n	8001c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d130      	bne.n	8001ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 0201 	and.w	r2, r3, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d017      	beq.n	8001d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d123      	bne.n	8001d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a2 	beq.w	8001ee2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b57      	ldr	r3, [pc, #348]	; (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a56      	ldr	r2, [pc, #344]	; (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b54      	ldr	r3, [pc, #336]	; (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dba:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a49      	ldr	r2, [pc, #292]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d019      	beq.n	8001e1a <HAL_GPIO_Init+0x202>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a48      	ldr	r2, [pc, #288]	; (8001f0c <HAL_GPIO_Init+0x2f4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0x1fe>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <HAL_GPIO_Init+0x2f8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00d      	beq.n	8001e12 <HAL_GPIO_Init+0x1fa>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a46      	ldr	r2, [pc, #280]	; (8001f14 <HAL_GPIO_Init+0x2fc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <HAL_GPIO_Init+0x1f6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a45      	ldr	r2, [pc, #276]	; (8001f18 <HAL_GPIO_Init+0x300>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <HAL_GPIO_Init+0x1f2>
 8001e06:	2304      	movs	r3, #4
 8001e08:	e008      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e004      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f002 0203 	and.w	r2, r2, #3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4093      	lsls	r3, r2
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2c:	4935      	ldr	r1, [pc, #212]	; (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3a:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5e:	4a2f      	ldr	r2, [pc, #188]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e88:	4a24      	ldr	r2, [pc, #144]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001edc:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	f67f aea2 	bls.w	8001c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40013c00 	.word	0x40013c00

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e267      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d075      	beq.n	800205e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f72:	4b88      	ldr	r3, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d00c      	beq.n	8001f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7e:	4b85      	ldr	r3, [pc, #532]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d112      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8a:	4b82      	ldr	r3, [pc, #520]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f96:	d10b      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	4b7e      	ldr	r3, [pc, #504]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d05b      	beq.n	800205c <HAL_RCC_OscConfig+0x108>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d157      	bne.n	800205c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e242      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb8:	d106      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x74>
 8001fba:	4b76      	ldr	r3, [pc, #472]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a75      	ldr	r2, [pc, #468]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e01d      	b.n	8002004 <HAL_RCC_OscConfig+0xb0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x98>
 8001fd2:	4b70      	ldr	r3, [pc, #448]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6f      	ldr	r2, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b6d      	ldr	r3, [pc, #436]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6c      	ldr	r2, [pc, #432]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0xb0>
 8001fec:	4b69      	ldr	r3, [pc, #420]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a68      	ldr	r2, [pc, #416]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b66      	ldr	r3, [pc, #408]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a65      	ldr	r2, [pc, #404]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff f870 	bl	80010f0 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff f86c 	bl	80010f0 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e207      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0xc0>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff f85c 	bl	80010f0 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff f858 	bl	80010f0 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1f3      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	4b51      	ldr	r3, [pc, #324]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0xe8>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d063      	beq.n	8002132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800206a:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002076:	4b47      	ldr	r3, [pc, #284]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207e:	2b08      	cmp	r3, #8
 8002080:	d11c      	bne.n	80020bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002082:	4b44      	ldr	r3, [pc, #272]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x152>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1c7      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4937      	ldr	r1, [pc, #220]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	e03a      	b.n	8002132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c4:	4b34      	ldr	r3, [pc, #208]	; (8002198 <HAL_RCC_OscConfig+0x244>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7ff f811 	bl	80010f0 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d2:	f7ff f80d 	bl	80010f0 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e1a8      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b28      	ldr	r3, [pc, #160]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4925      	ldr	r1, [pc, #148]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_OscConfig+0x244>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe fff0 	bl	80010f0 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002114:	f7fe ffec 	bl	80010f0 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e187      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d036      	beq.n	80021ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_RCC_OscConfig+0x248>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7fe ffd0 	bl	80010f0 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002154:	f7fe ffcc 	bl	80010f0 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e167      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x200>
 8002172:	e01b      	b.n	80021ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_OscConfig+0x248>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7fe ffb9 	bl	80010f0 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002180:	e00e      	b.n	80021a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002182:	f7fe ffb5 	bl	80010f0 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d907      	bls.n	80021a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e150      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
 8002194:	40023800 	.word	0x40023800
 8002198:	42470000 	.word	0x42470000
 800219c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ea      	bne.n	8002182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8097 	beq.w	80022e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	4b81      	ldr	r3, [pc, #516]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10f      	bne.n	80021ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	4b7d      	ldr	r3, [pc, #500]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a7c      	ldr	r2, [pc, #496]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b7a      	ldr	r3, [pc, #488]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e6:	2301      	movs	r3, #1
 80021e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b77      	ldr	r3, [pc, #476]	; (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f6:	4b74      	ldr	r3, [pc, #464]	; (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a73      	ldr	r2, [pc, #460]	; (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7fe ff75 	bl	80010f0 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7fe ff71 	bl	80010f0 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e10c      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	4b6a      	ldr	r3, [pc, #424]	; (80023c8 <HAL_RCC_OscConfig+0x474>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x2ea>
 8002230:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a63      	ldr	r2, [pc, #396]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
 800223c:	e01c      	b.n	8002278 <HAL_RCC_OscConfig+0x324>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x30c>
 8002246:	4b5f      	ldr	r3, [pc, #380]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	4a5e      	ldr	r2, [pc, #376]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6713      	str	r3, [r2, #112]	; 0x70
 8002252:	4b5c      	ldr	r3, [pc, #368]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	4a5b      	ldr	r2, [pc, #364]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6713      	str	r3, [r2, #112]	; 0x70
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0x324>
 8002260:	4b58      	ldr	r3, [pc, #352]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a57      	ldr	r2, [pc, #348]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	4b55      	ldr	r3, [pc, #340]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4a54      	ldr	r2, [pc, #336]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002272:	f023 0304 	bic.w	r3, r3, #4
 8002276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7fe ff36 	bl	80010f0 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	e00a      	b.n	800229e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7fe ff32 	bl	80010f0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0cb      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229e:	4b49      	ldr	r3, [pc, #292]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0ee      	beq.n	8002288 <HAL_RCC_OscConfig+0x334>
 80022aa:	e014      	b.n	80022d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7fe ff20 	bl	80010f0 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7fe ff1c 	bl	80010f0 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0b5      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ca:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ee      	bne.n	80022b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022dc:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4a38      	ldr	r2, [pc, #224]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a1 	beq.w	8002434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d05c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d141      	bne.n	800238a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <HAL_RCC_OscConfig+0x478>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe fef0 	bl	80010f0 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002314:	f7fe feec 	bl	80010f0 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e087      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	3b01      	subs	r3, #1
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	061b      	lsls	r3, r3, #24
 8002356:	491b      	ldr	r1, [pc, #108]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_RCC_OscConfig+0x478>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7fe fec5 	bl	80010f0 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236a:	f7fe fec1 	bl	80010f0 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e05c      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x416>
 8002388:	e054      	b.n	8002434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_RCC_OscConfig+0x478>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe feae 	bl	80010f0 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002398:	f7fe feaa 	bl	80010f0 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e045      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x444>
 80023b6:	e03d      	b.n	8002434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e038      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40007000 	.word	0x40007000
 80023cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x4ec>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d028      	beq.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d121      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d11a      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002408:	4293      	cmp	r3, r2
 800240a:	d111      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	3b01      	subs	r3, #1
 800241a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d107      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0cc      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002458:	4b68      	ldr	r3, [pc, #416]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d90c      	bls.n	8002480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b65      	ldr	r3, [pc, #404]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b63      	ldr	r3, [pc, #396]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0b8      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d020      	beq.n	80024ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002498:	4b59      	ldr	r3, [pc, #356]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a58      	ldr	r2, [pc, #352]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b0:	4b53      	ldr	r3, [pc, #332]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a52      	ldr	r2, [pc, #328]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024bc:	4b50      	ldr	r3, [pc, #320]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	494d      	ldr	r1, [pc, #308]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d044      	beq.n	8002564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b47      	ldr	r3, [pc, #284]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d119      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e07f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e06f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002512:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e067      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002522:	4b37      	ldr	r3, [pc, #220]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f023 0203 	bic.w	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4934      	ldr	r1, [pc, #208]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002534:	f7fe fddc 	bl	80010f0 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	e00a      	b.n	8002552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7fe fdd8 	bl	80010f0 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e04f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 020c 	and.w	r2, r3, #12
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	429a      	cmp	r2, r3
 8002562:	d1eb      	bne.n	800253c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d20c      	bcs.n	800258c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b20      	ldr	r3, [pc, #128]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e032      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4916      	ldr	r1, [pc, #88]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	490e      	ldr	r1, [pc, #56]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ca:	f000 f821 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	490a      	ldr	r1, [pc, #40]	; (8002604 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	5ccb      	ldrb	r3, [r1, r3]
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fd3c 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023c00 	.word	0x40023c00
 8002600:	40023800 	.word	0x40023800
 8002604:	0800347c 	.word	0x0800347c
 8002608:	20000000 	.word	0x20000000
 800260c:	20000004 	.word	0x20000004

08002610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002614:	b094      	sub	sp, #80	; 0x50
 8002616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	647b      	str	r3, [r7, #68]	; 0x44
 800261c:	2300      	movs	r3, #0
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002620:	2300      	movs	r3, #0
 8002622:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002628:	4b79      	ldr	r3, [pc, #484]	; (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b08      	cmp	r3, #8
 8002632:	d00d      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x40>
 8002634:	2b08      	cmp	r3, #8
 8002636:	f200 80e1 	bhi.w	80027fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x34>
 800263e:	2b04      	cmp	r3, #4
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x3a>
 8002642:	e0db      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b73      	ldr	r3, [pc, #460]	; (8002814 <HAL_RCC_GetSysClockFreq+0x204>)
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002648:	e0db      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264a:	4b73      	ldr	r3, [pc, #460]	; (8002818 <HAL_RCC_GetSysClockFreq+0x208>)
 800264c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800264e:	e0d8      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002650:	4b6f      	ldr	r3, [pc, #444]	; (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002658:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265a:	4b6d      	ldr	r3, [pc, #436]	; (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d063      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002666:	4b6a      	ldr	r3, [pc, #424]	; (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	2200      	movs	r2, #0
 800266e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002670:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
 800267e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002682:	4622      	mov	r2, r4
 8002684:	462b      	mov	r3, r5
 8002686:	f04f 0000 	mov.w	r0, #0
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	0159      	lsls	r1, r3, #5
 8002690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002694:	0150      	lsls	r0, r2, #5
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4621      	mov	r1, r4
 800269c:	1a51      	subs	r1, r2, r1
 800269e:	6139      	str	r1, [r7, #16]
 80026a0:	4629      	mov	r1, r5
 80026a2:	eb63 0301 	sbc.w	r3, r3, r1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b4:	4659      	mov	r1, fp
 80026b6:	018b      	lsls	r3, r1, #6
 80026b8:	4651      	mov	r1, sl
 80026ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026be:	4651      	mov	r1, sl
 80026c0:	018a      	lsls	r2, r1, #6
 80026c2:	4651      	mov	r1, sl
 80026c4:	ebb2 0801 	subs.w	r8, r2, r1
 80026c8:	4659      	mov	r1, fp
 80026ca:	eb63 0901 	sbc.w	r9, r3, r1
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e2:	4690      	mov	r8, r2
 80026e4:	4699      	mov	r9, r3
 80026e6:	4623      	mov	r3, r4
 80026e8:	eb18 0303 	adds.w	r3, r8, r3
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	462b      	mov	r3, r5
 80026f0:	eb49 0303 	adc.w	r3, r9, r3
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002702:	4629      	mov	r1, r5
 8002704:	024b      	lsls	r3, r1, #9
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800270c:	4621      	mov	r1, r4
 800270e:	024a      	lsls	r2, r1, #9
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002716:	2200      	movs	r2, #0
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
 800271a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800271c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002720:	f7fd ff36 	bl	8000590 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4613      	mov	r3, r2
 800272a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800272c:	e058      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272e:	4b38      	ldr	r3, [pc, #224]	; (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	2200      	movs	r2, #0
 8002736:	4618      	mov	r0, r3
 8002738:	4611      	mov	r1, r2
 800273a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002748:	4642      	mov	r2, r8
 800274a:	464b      	mov	r3, r9
 800274c:	f04f 0000 	mov.w	r0, #0
 8002750:	f04f 0100 	mov.w	r1, #0
 8002754:	0159      	lsls	r1, r3, #5
 8002756:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275a:	0150      	lsls	r0, r2, #5
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4641      	mov	r1, r8
 8002762:	ebb2 0a01 	subs.w	sl, r2, r1
 8002766:	4649      	mov	r1, r9
 8002768:	eb63 0b01 	sbc.w	fp, r3, r1
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002778:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800277c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002780:	ebb2 040a 	subs.w	r4, r2, sl
 8002784:	eb63 050b 	sbc.w	r5, r3, fp
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	00eb      	lsls	r3, r5, #3
 8002792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002796:	00e2      	lsls	r2, r4, #3
 8002798:	4614      	mov	r4, r2
 800279a:	461d      	mov	r5, r3
 800279c:	4643      	mov	r3, r8
 800279e:	18e3      	adds	r3, r4, r3
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	464b      	mov	r3, r9
 80027a4:	eb45 0303 	adc.w	r3, r5, r3
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027b6:	4629      	mov	r1, r5
 80027b8:	028b      	lsls	r3, r1, #10
 80027ba:	4621      	mov	r1, r4
 80027bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027c0:	4621      	mov	r1, r4
 80027c2:	028a      	lsls	r2, r1, #10
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ca:	2200      	movs	r2, #0
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	61fa      	str	r2, [r7, #28]
 80027d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d4:	f7fd fedc 	bl	8000590 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	3301      	adds	r3, #1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027fa:	e002      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetSysClockFreq+0x204>)
 80027fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002804:	4618      	mov	r0, r3
 8002806:	3750      	adds	r7, #80	; 0x50
 8002808:	46bd      	mov	sp, r7
 800280a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	00f42400 	.word	0x00f42400
 8002818:	007a1200 	.word	0x007a1200

0800281c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_RCC_GetHCLKFreq+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000000 	.word	0x20000000

08002834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002838:	f7ff fff0 	bl	800281c <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0a9b      	lsrs	r3, r3, #10
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	0800348c 	.word	0x0800348c

0800285c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002860:	f7ff ffdc 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0b5b      	lsrs	r3, r3, #13
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4903      	ldr	r1, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	0800348c 	.word	0x0800348c

08002884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e041      	b.n	800291a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fafc 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f000 f958 	bl	8002b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d001      	beq.n	800293c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e044      	b.n	80029c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1e      	ldr	r2, [pc, #120]	; (80029d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d018      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0x6c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002966:	d013      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0x6c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00e      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0x6c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a19      	ldr	r2, [pc, #100]	; (80029dc <HAL_TIM_Base_Start_IT+0xb8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d009      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0x6c>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d004      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0x6c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d010      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b2:	e007      	b.n	80029c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40010000 	.word	0x40010000
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800
 80029e0:	40000c00 	.word	0x40000c00
 80029e4:	40014000 	.word	0x40014000

080029e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_TIM_ConfigClockSource+0x1c>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e0b4      	b.n	8002b6e <HAL_TIM_ConfigClockSource+0x186>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3c:	d03e      	beq.n	8002abc <HAL_TIM_ConfigClockSource+0xd4>
 8002a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a42:	f200 8087 	bhi.w	8002b54 <HAL_TIM_ConfigClockSource+0x16c>
 8002a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4a:	f000 8086 	beq.w	8002b5a <HAL_TIM_ConfigClockSource+0x172>
 8002a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a52:	d87f      	bhi.n	8002b54 <HAL_TIM_ConfigClockSource+0x16c>
 8002a54:	2b70      	cmp	r3, #112	; 0x70
 8002a56:	d01a      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0xa6>
 8002a58:	2b70      	cmp	r3, #112	; 0x70
 8002a5a:	d87b      	bhi.n	8002b54 <HAL_TIM_ConfigClockSource+0x16c>
 8002a5c:	2b60      	cmp	r3, #96	; 0x60
 8002a5e:	d050      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x11a>
 8002a60:	2b60      	cmp	r3, #96	; 0x60
 8002a62:	d877      	bhi.n	8002b54 <HAL_TIM_ConfigClockSource+0x16c>
 8002a64:	2b50      	cmp	r3, #80	; 0x50
 8002a66:	d03c      	beq.n	8002ae2 <HAL_TIM_ConfigClockSource+0xfa>
 8002a68:	2b50      	cmp	r3, #80	; 0x50
 8002a6a:	d873      	bhi.n	8002b54 <HAL_TIM_ConfigClockSource+0x16c>
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d058      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x13a>
 8002a70:	2b40      	cmp	r3, #64	; 0x40
 8002a72:	d86f      	bhi.n	8002b54 <HAL_TIM_ConfigClockSource+0x16c>
 8002a74:	2b30      	cmp	r3, #48	; 0x30
 8002a76:	d064      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0x15a>
 8002a78:	2b30      	cmp	r3, #48	; 0x30
 8002a7a:	d86b      	bhi.n	8002b54 <HAL_TIM_ConfigClockSource+0x16c>
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d060      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0x15a>
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d867      	bhi.n	8002b54 <HAL_TIM_ConfigClockSource+0x16c>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d05c      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0x15a>
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d05a      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0x15a>
 8002a8c:	e062      	b.n	8002b54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f000 f965 	bl	8002d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ab0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	609a      	str	r2, [r3, #8]
      break;
 8002aba:	e04f      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6899      	ldr	r1, [r3, #8]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f000 f94e 	bl	8002d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ade:	609a      	str	r2, [r3, #8]
      break;
 8002ae0:	e03c      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f000 f8c2 	bl	8002c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2150      	movs	r1, #80	; 0x50
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f91b 	bl	8002d36 <TIM_ITRx_SetConfig>
      break;
 8002b00:	e02c      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6859      	ldr	r1, [r3, #4]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f000 f8e1 	bl	8002cd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2160      	movs	r1, #96	; 0x60
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f90b 	bl	8002d36 <TIM_ITRx_SetConfig>
      break;
 8002b20:	e01c      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f000 f8a2 	bl	8002c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2140      	movs	r1, #64	; 0x40
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f8fb 	bl	8002d36 <TIM_ITRx_SetConfig>
      break;
 8002b40:	e00c      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	f000 f8f2 	bl	8002d36 <TIM_ITRx_SetConfig>
      break;
 8002b52:	e003      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
      break;
 8002b58:	e000      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a34      	ldr	r2, [pc, #208]	; (8002c5c <TIM_Base_SetConfig+0xe4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00f      	beq.n	8002bb0 <TIM_Base_SetConfig+0x38>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b96:	d00b      	beq.n	8002bb0 <TIM_Base_SetConfig+0x38>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a31      	ldr	r2, [pc, #196]	; (8002c60 <TIM_Base_SetConfig+0xe8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d007      	beq.n	8002bb0 <TIM_Base_SetConfig+0x38>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a30      	ldr	r2, [pc, #192]	; (8002c64 <TIM_Base_SetConfig+0xec>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d003      	beq.n	8002bb0 <TIM_Base_SetConfig+0x38>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a2f      	ldr	r2, [pc, #188]	; (8002c68 <TIM_Base_SetConfig+0xf0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d108      	bne.n	8002bc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a25      	ldr	r2, [pc, #148]	; (8002c5c <TIM_Base_SetConfig+0xe4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01b      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd0:	d017      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a22      	ldr	r2, [pc, #136]	; (8002c60 <TIM_Base_SetConfig+0xe8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a21      	ldr	r2, [pc, #132]	; (8002c64 <TIM_Base_SetConfig+0xec>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00f      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a20      	ldr	r2, [pc, #128]	; (8002c68 <TIM_Base_SetConfig+0xf0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <TIM_Base_SetConfig+0xf4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1e      	ldr	r2, [pc, #120]	; (8002c70 <TIM_Base_SetConfig+0xf8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <TIM_Base_SetConfig+0xfc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d108      	bne.n	8002c14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a08      	ldr	r2, [pc, #32]	; (8002c5c <TIM_Base_SetConfig+0xe4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d103      	bne.n	8002c48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	615a      	str	r2, [r3, #20]
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40010000 	.word	0x40010000
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40000800 	.word	0x40000800
 8002c68:	40000c00 	.word	0x40000c00
 8002c6c:	40014000 	.word	0x40014000
 8002c70:	40014400 	.word	0x40014400
 8002c74:	40014800 	.word	0x40014800

08002c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f023 0201 	bic.w	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f023 030a 	bic.w	r3, r3, #10
 8002cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b087      	sub	sp, #28
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f023 0210 	bic.w	r2, r3, #16
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	031b      	lsls	r3, r3, #12
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	621a      	str	r2, [r3, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f043 0307 	orr.w	r3, r3, #7
 8002d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	609a      	str	r2, [r3, #8]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	021a      	lsls	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e050      	b.n	8002e66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d018      	beq.n	8002e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e10:	d013      	beq.n	8002e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00e      	beq.n	8002e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d009      	beq.n	8002e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10c      	bne.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40010000 	.word	0x40010000
 8002e78:	40000400 	.word	0x40000400
 8002e7c:	40000800 	.word	0x40000800
 8002e80:	40000c00 	.word	0x40000c00
 8002e84:	40014000 	.word	0x40014000

08002e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e03f      	b.n	8002f1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe f846 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	; 0x24
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f829 	bl	8002f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f28:	b0c0      	sub	sp, #256	; 0x100
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f40:	68d9      	ldr	r1, [r3, #12]
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	ea40 0301 	orr.w	r3, r0, r1
 8002f4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f7c:	f021 010c 	bic.w	r1, r1, #12
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9e:	6999      	ldr	r1, [r3, #24]
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	ea40 0301 	orr.w	r3, r0, r1
 8002faa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4b8f      	ldr	r3, [pc, #572]	; (80031f0 <UART_SetConfig+0x2cc>)
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d005      	beq.n	8002fc4 <UART_SetConfig+0xa0>
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b8d      	ldr	r3, [pc, #564]	; (80031f4 <UART_SetConfig+0x2d0>)
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d104      	bne.n	8002fce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fc4:	f7ff fc4a 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8002fc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fcc:	e003      	b.n	8002fd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fce:	f7ff fc31 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 8002fd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe0:	f040 810c 	bne.w	80031fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ff2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	462b      	mov	r3, r5
 8002ffa:	1891      	adds	r1, r2, r2
 8002ffc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ffe:	415b      	adcs	r3, r3
 8003000:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003002:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003006:	4621      	mov	r1, r4
 8003008:	eb12 0801 	adds.w	r8, r2, r1
 800300c:	4629      	mov	r1, r5
 800300e:	eb43 0901 	adc.w	r9, r3, r1
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800301e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003026:	4690      	mov	r8, r2
 8003028:	4699      	mov	r9, r3
 800302a:	4623      	mov	r3, r4
 800302c:	eb18 0303 	adds.w	r3, r8, r3
 8003030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003034:	462b      	mov	r3, r5
 8003036:	eb49 0303 	adc.w	r3, r9, r3
 800303a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800303e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800304a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800304e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003052:	460b      	mov	r3, r1
 8003054:	18db      	adds	r3, r3, r3
 8003056:	653b      	str	r3, [r7, #80]	; 0x50
 8003058:	4613      	mov	r3, r2
 800305a:	eb42 0303 	adc.w	r3, r2, r3
 800305e:	657b      	str	r3, [r7, #84]	; 0x54
 8003060:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003064:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003068:	f7fd fa92 	bl	8000590 <__aeabi_uldivmod>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <UART_SetConfig+0x2d4>)
 8003072:	fba3 2302 	umull	r2, r3, r3, r2
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	011c      	lsls	r4, r3, #4
 800307a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800307e:	2200      	movs	r2, #0
 8003080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003084:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003088:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800308c:	4642      	mov	r2, r8
 800308e:	464b      	mov	r3, r9
 8003090:	1891      	adds	r1, r2, r2
 8003092:	64b9      	str	r1, [r7, #72]	; 0x48
 8003094:	415b      	adcs	r3, r3
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003098:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800309c:	4641      	mov	r1, r8
 800309e:	eb12 0a01 	adds.w	sl, r2, r1
 80030a2:	4649      	mov	r1, r9
 80030a4:	eb43 0b01 	adc.w	fp, r3, r1
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030bc:	4692      	mov	sl, r2
 80030be:	469b      	mov	fp, r3
 80030c0:	4643      	mov	r3, r8
 80030c2:	eb1a 0303 	adds.w	r3, sl, r3
 80030c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030ca:	464b      	mov	r3, r9
 80030cc:	eb4b 0303 	adc.w	r3, fp, r3
 80030d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030e8:	460b      	mov	r3, r1
 80030ea:	18db      	adds	r3, r3, r3
 80030ec:	643b      	str	r3, [r7, #64]	; 0x40
 80030ee:	4613      	mov	r3, r2
 80030f0:	eb42 0303 	adc.w	r3, r2, r3
 80030f4:	647b      	str	r3, [r7, #68]	; 0x44
 80030f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030fe:	f7fd fa47 	bl	8000590 <__aeabi_uldivmod>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4611      	mov	r1, r2
 8003108:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <UART_SetConfig+0x2d4>)
 800310a:	fba3 2301 	umull	r2, r3, r3, r1
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2264      	movs	r2, #100	; 0x64
 8003112:	fb02 f303 	mul.w	r3, r2, r3
 8003116:	1acb      	subs	r3, r1, r3
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800311e:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <UART_SetConfig+0x2d4>)
 8003120:	fba3 2302 	umull	r2, r3, r3, r2
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800312c:	441c      	add	r4, r3
 800312e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003132:	2200      	movs	r2, #0
 8003134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003138:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800313c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003140:	4642      	mov	r2, r8
 8003142:	464b      	mov	r3, r9
 8003144:	1891      	adds	r1, r2, r2
 8003146:	63b9      	str	r1, [r7, #56]	; 0x38
 8003148:	415b      	adcs	r3, r3
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800314c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003150:	4641      	mov	r1, r8
 8003152:	1851      	adds	r1, r2, r1
 8003154:	6339      	str	r1, [r7, #48]	; 0x30
 8003156:	4649      	mov	r1, r9
 8003158:	414b      	adcs	r3, r1
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003168:	4659      	mov	r1, fp
 800316a:	00cb      	lsls	r3, r1, #3
 800316c:	4651      	mov	r1, sl
 800316e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003172:	4651      	mov	r1, sl
 8003174:	00ca      	lsls	r2, r1, #3
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	4603      	mov	r3, r0
 800317c:	4642      	mov	r2, r8
 800317e:	189b      	adds	r3, r3, r2
 8003180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003184:	464b      	mov	r3, r9
 8003186:	460a      	mov	r2, r1
 8003188:	eb42 0303 	adc.w	r3, r2, r3
 800318c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800319c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031a4:	460b      	mov	r3, r1
 80031a6:	18db      	adds	r3, r3, r3
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031aa:	4613      	mov	r3, r2
 80031ac:	eb42 0303 	adc.w	r3, r2, r3
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031ba:	f7fd f9e9 	bl	8000590 <__aeabi_uldivmod>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <UART_SetConfig+0x2d4>)
 80031c4:	fba3 1302 	umull	r1, r3, r3, r2
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	2164      	movs	r1, #100	; 0x64
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	3332      	adds	r3, #50	; 0x32
 80031d6:	4a08      	ldr	r2, [pc, #32]	; (80031f8 <UART_SetConfig+0x2d4>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	f003 0207 	and.w	r2, r3, #7
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4422      	add	r2, r4
 80031ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031ec:	e105      	b.n	80033fa <UART_SetConfig+0x4d6>
 80031ee:	bf00      	nop
 80031f0:	40011000 	.word	0x40011000
 80031f4:	40011400 	.word	0x40011400
 80031f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003200:	2200      	movs	r2, #0
 8003202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003206:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800320a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800320e:	4642      	mov	r2, r8
 8003210:	464b      	mov	r3, r9
 8003212:	1891      	adds	r1, r2, r2
 8003214:	6239      	str	r1, [r7, #32]
 8003216:	415b      	adcs	r3, r3
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
 800321a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800321e:	4641      	mov	r1, r8
 8003220:	1854      	adds	r4, r2, r1
 8003222:	4649      	mov	r1, r9
 8003224:	eb43 0501 	adc.w	r5, r3, r1
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	00eb      	lsls	r3, r5, #3
 8003232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003236:	00e2      	lsls	r2, r4, #3
 8003238:	4614      	mov	r4, r2
 800323a:	461d      	mov	r5, r3
 800323c:	4643      	mov	r3, r8
 800323e:	18e3      	adds	r3, r4, r3
 8003240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003244:	464b      	mov	r3, r9
 8003246:	eb45 0303 	adc.w	r3, r5, r3
 800324a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800325a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800326a:	4629      	mov	r1, r5
 800326c:	008b      	lsls	r3, r1, #2
 800326e:	4621      	mov	r1, r4
 8003270:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003274:	4621      	mov	r1, r4
 8003276:	008a      	lsls	r2, r1, #2
 8003278:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800327c:	f7fd f988 	bl	8000590 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4b60      	ldr	r3, [pc, #384]	; (8003408 <UART_SetConfig+0x4e4>)
 8003286:	fba3 2302 	umull	r2, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	011c      	lsls	r4, r3, #4
 800328e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003292:	2200      	movs	r2, #0
 8003294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003298:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800329c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032a0:	4642      	mov	r2, r8
 80032a2:	464b      	mov	r3, r9
 80032a4:	1891      	adds	r1, r2, r2
 80032a6:	61b9      	str	r1, [r7, #24]
 80032a8:	415b      	adcs	r3, r3
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b0:	4641      	mov	r1, r8
 80032b2:	1851      	adds	r1, r2, r1
 80032b4:	6139      	str	r1, [r7, #16]
 80032b6:	4649      	mov	r1, r9
 80032b8:	414b      	adcs	r3, r1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032c8:	4659      	mov	r1, fp
 80032ca:	00cb      	lsls	r3, r1, #3
 80032cc:	4651      	mov	r1, sl
 80032ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032d2:	4651      	mov	r1, sl
 80032d4:	00ca      	lsls	r2, r1, #3
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	4603      	mov	r3, r0
 80032dc:	4642      	mov	r2, r8
 80032de:	189b      	adds	r3, r3, r2
 80032e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032e4:	464b      	mov	r3, r9
 80032e6:	460a      	mov	r2, r1
 80032e8:	eb42 0303 	adc.w	r3, r2, r3
 80032ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80032fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003308:	4649      	mov	r1, r9
 800330a:	008b      	lsls	r3, r1, #2
 800330c:	4641      	mov	r1, r8
 800330e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003312:	4641      	mov	r1, r8
 8003314:	008a      	lsls	r2, r1, #2
 8003316:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800331a:	f7fd f939 	bl	8000590 <__aeabi_uldivmod>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4b39      	ldr	r3, [pc, #228]	; (8003408 <UART_SetConfig+0x4e4>)
 8003324:	fba3 1302 	umull	r1, r3, r3, r2
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	2164      	movs	r1, #100	; 0x64
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	3332      	adds	r3, #50	; 0x32
 8003336:	4a34      	ldr	r2, [pc, #208]	; (8003408 <UART_SetConfig+0x4e4>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003342:	441c      	add	r4, r3
 8003344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003348:	2200      	movs	r2, #0
 800334a:	673b      	str	r3, [r7, #112]	; 0x70
 800334c:	677a      	str	r2, [r7, #116]	; 0x74
 800334e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003352:	4642      	mov	r2, r8
 8003354:	464b      	mov	r3, r9
 8003356:	1891      	adds	r1, r2, r2
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	415b      	adcs	r3, r3
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003362:	4641      	mov	r1, r8
 8003364:	1851      	adds	r1, r2, r1
 8003366:	6039      	str	r1, [r7, #0]
 8003368:	4649      	mov	r1, r9
 800336a:	414b      	adcs	r3, r1
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800337a:	4659      	mov	r1, fp
 800337c:	00cb      	lsls	r3, r1, #3
 800337e:	4651      	mov	r1, sl
 8003380:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003384:	4651      	mov	r1, sl
 8003386:	00ca      	lsls	r2, r1, #3
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	4603      	mov	r3, r0
 800338e:	4642      	mov	r2, r8
 8003390:	189b      	adds	r3, r3, r2
 8003392:	66bb      	str	r3, [r7, #104]	; 0x68
 8003394:	464b      	mov	r3, r9
 8003396:	460a      	mov	r2, r1
 8003398:	eb42 0303 	adc.w	r3, r2, r3
 800339c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	663b      	str	r3, [r7, #96]	; 0x60
 80033a8:	667a      	str	r2, [r7, #100]	; 0x64
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033b6:	4649      	mov	r1, r9
 80033b8:	008b      	lsls	r3, r1, #2
 80033ba:	4641      	mov	r1, r8
 80033bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033c0:	4641      	mov	r1, r8
 80033c2:	008a      	lsls	r2, r1, #2
 80033c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033c8:	f7fd f8e2 	bl	8000590 <__aeabi_uldivmod>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <UART_SetConfig+0x4e4>)
 80033d2:	fba3 1302 	umull	r1, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2164      	movs	r1, #100	; 0x64
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	3332      	adds	r3, #50	; 0x32
 80033e4:	4a08      	ldr	r2, [pc, #32]	; (8003408 <UART_SetConfig+0x4e4>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4422      	add	r2, r4
 80033f8:	609a      	str	r2, [r3, #8]
}
 80033fa:	bf00      	nop
 80033fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003400:	46bd      	mov	sp, r7
 8003402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003406:	bf00      	nop
 8003408:	51eb851f 	.word	0x51eb851f

0800340c <__libc_init_array>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	4d0d      	ldr	r5, [pc, #52]	; (8003444 <__libc_init_array+0x38>)
 8003410:	4c0d      	ldr	r4, [pc, #52]	; (8003448 <__libc_init_array+0x3c>)
 8003412:	1b64      	subs	r4, r4, r5
 8003414:	10a4      	asrs	r4, r4, #2
 8003416:	2600      	movs	r6, #0
 8003418:	42a6      	cmp	r6, r4
 800341a:	d109      	bne.n	8003430 <__libc_init_array+0x24>
 800341c:	4d0b      	ldr	r5, [pc, #44]	; (800344c <__libc_init_array+0x40>)
 800341e:	4c0c      	ldr	r4, [pc, #48]	; (8003450 <__libc_init_array+0x44>)
 8003420:	f000 f820 	bl	8003464 <_init>
 8003424:	1b64      	subs	r4, r4, r5
 8003426:	10a4      	asrs	r4, r4, #2
 8003428:	2600      	movs	r6, #0
 800342a:	42a6      	cmp	r6, r4
 800342c:	d105      	bne.n	800343a <__libc_init_array+0x2e>
 800342e:	bd70      	pop	{r4, r5, r6, pc}
 8003430:	f855 3b04 	ldr.w	r3, [r5], #4
 8003434:	4798      	blx	r3
 8003436:	3601      	adds	r6, #1
 8003438:	e7ee      	b.n	8003418 <__libc_init_array+0xc>
 800343a:	f855 3b04 	ldr.w	r3, [r5], #4
 800343e:	4798      	blx	r3
 8003440:	3601      	adds	r6, #1
 8003442:	e7f2      	b.n	800342a <__libc_init_array+0x1e>
 8003444:	0800349c 	.word	0x0800349c
 8003448:	0800349c 	.word	0x0800349c
 800344c:	0800349c 	.word	0x0800349c
 8003450:	080034a0 	.word	0x080034a0

08003454 <memset>:
 8003454:	4402      	add	r2, r0
 8003456:	4603      	mov	r3, r0
 8003458:	4293      	cmp	r3, r2
 800345a:	d100      	bne.n	800345e <memset+0xa>
 800345c:	4770      	bx	lr
 800345e:	f803 1b01 	strb.w	r1, [r3], #1
 8003462:	e7f9      	b.n	8003458 <memset+0x4>

08003464 <_init>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	bf00      	nop
 8003468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346a:	bc08      	pop	{r3}
 800346c:	469e      	mov	lr, r3
 800346e:	4770      	bx	lr

08003470 <_fini>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	bf00      	nop
 8003474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003476:	bc08      	pop	{r3}
 8003478:	469e      	mov	lr, r3
 800347a:	4770      	bx	lr
